<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泽野之乡</title>
  
  
  <link href="https://zhihuzeye.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhihuzeye.github.io/"/>
  <updated>2024-06-14T11:55:03.502Z</updated>
  <id>https://zhihuzeye.github.io/</id>
  
  <author>
    <name>之乎泽野</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript 基本数据类型</title>
    <link href="https://zhihuzeye.github.io/2024/06/14/Javascript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://zhihuzeye.github.io/2024/06/14/Javascript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-06-14T11:41:46.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型简介和检测"><a href="#数据类型简介和检测" class="headerlink" title="数据类型简介和检测"></a>数据类型简介和检测</h2><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ol><li>null 类型<ul><li>表示“空”，它是“空对象”</li><li>当我们需要将对象销毁、数组销毁或者删除事件监听时，通常将它们设置为null<ul><li><code>box.click = null</code></li></ul></li><li><strong>使用 typeof 检测 null 值，结果是object，这点尤其要注意</strong></li><li>类型和typeof 检测结果并不是一一对应的，比如数组用typeof检测出来的结果也是object</li></ul></li><li>undefined 类型<ul><li>一个没有被复制的变量的默认值是undefined，而undefine的类型也是undefined</li><li>即：undefined又是值，又是一种类型，这种类型只有它自己一个值</li></ul></li><li>布尔类型  （Boolean）<ul><li>布尔型值只有两个：true 和 fasle，分别表示真和假</li></ul></li><li>字符串类型（String）<ul><li>字符串要用引号包裹，双引号或者单引号均可</li><li>加号可以用来拼接多个字符串</li><li>空字符串，直接写闭合的引号即可</li><li>字符串的 length 属性表示字符串的长度</li><li>字符串的常用方法<ul><li>charAt()<ul><li>得到指定位置字符</li></ul></li><li>substring()<ul><li>提取子串<ul><li>substring(a,b) 方法得到从 a 开始到b结束（不包含b处）的子串</li><li>如果省略第二个参数，返回字符串一直到字符串的结尾</li><li>substring(a,b) 中，a 可以大于 b ，数字顺序将自动调整为小数在前</li></ul></li></ul></li><li>substr()<ul><li>提取子串<ul><li>substr(a,b) 方法得到从 a 开始的 长度为b的子串<ul><li>子串的长度而不是编号</li></ul></li><li>substr(a,b) 方法 b 参数可以省略，表示到文档的结尾</li><li>substr(a,b) 方法中，a可以是负数，表示倒数位置</li></ul></li></ul></li><li>slice()<ul><li>提取子串<ul><li>slice(a,b) 方法得到从 a 开始到b结束（不包含b处）的子串</li><li>slice(a,b) 方法 a 参数可以是负数</li><li>slice(a,b) 方法 a 参数必须小于b</li></ul></li></ul></li><li>toUpperCase()<ul><li>将字符串变为大写</li></ul></li><li>toLowerCase()<ul><li>将字符串变为小写</li></ul></li><li>indexOf()<ul><li>检索字符串<ul><li>返回某个字符串值在首次出现的位置</li><li>如果检测的字符串值没有出现，则返回-1</li></ul></li></ul></li></ul></li></ul></li><li>数字类型（Number）<ul><li>所有数字不分大小、不分整浮、不分正负、都是数字类型</li><li>小数中，零是可以省略的</li><li>较大数或较小数（绝对值比较小），可以写成科学计数法<ul><li>例：3e8、3e-4</li></ul></li><li>不同进制的数字<ul><li>二进制数值以0b开头  例：0b10</li><li>八进制数值以0开头  例：017</li><li>十六进制以0x开头  例如：0x156</li></ul></li><li>一个特殊的数字型值NaN<ul><li>NaN是英语 “not a number” 的 意思，即“不是一个数”，但它是一个数字类型的值</li><li>typeof NaN    &#x2F;&#x2F; number</li><li>0&#x2F;0 的结果就是NaN，事实上，在数学运算中，若结果不能得到数字，其结果往往都是NaN</li><li>NaN有一个“奇怪”的性质，不自等。</li></ul></li></ul></li></ol><h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h2><ol><li>其它值 -&gt; 数值<ul><li>Number() 系统内置的构造函数</li><li>parseInt() 函数</li><li>parseFloat() 函数</li></ul></li><li>其它值 -&gt; 字符串<ul><li>String() 函数 系统内置的构造函数</li><li>toString() 方法，几乎所有的值都有该方法</li><li><em>当数值直接调用 toString() 方法的时候，要加上括号 例：(5).toString()</em></li></ul></li><li>其它值 -&gt; 布尔值<ul><li>Boolean() 函数</li></ul></li></ol><h2 id="复杂数据类型简介"><a href="#复杂数据类型简介" class="headerlink" title="复杂数据类型简介"></a>复杂数据类型简介</h2><ol><li>对象  Object</li><li>方法 Function</li><li>复杂数据类型都是“引用类型”</li></ol><h2 id="typeof-运算符可以检测值或者变量的类型"><a href="#typeof-运算符可以检测值或者变量的类型" class="headerlink" title="typeof 运算符可以检测值或者变量的类型"></a>typeof 运算符可以检测值或者变量的类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">5</span>; </span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;shanmu&quot;</span>;</span><br></pre></td></tr></table></figure><ol><li>typeof 不是内置函数 是操作符</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型简介和检测&quot;&gt;&lt;a href=&quot;#数据类型简介和检测&quot; class=&quot;headerlink&quot; title=&quot;数据类型简介和检测&quot;&gt;&lt;/a&gt;数据类型简介和检测&lt;/h2&gt;&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;head</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Javascript" scheme="https://zhihuzeye.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS语法与变量</title>
    <link href="https://zhihuzeye.github.io/2024/06/14/JS%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
    <id>https://zhihuzeye.github.io/2024/06/14/JS%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%8F%98%E9%87%8F/</id>
    <published>2024-06-14T11:36:17.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><ol><li>alert</li><li>console</li></ol><h2 id="前端开发主要有哪些层，语言和功能是什么？"><a href="#前端开发主要有哪些层，语言和功能是什么？" class="headerlink" title="前端开发主要有哪些层，语言和功能是什么？"></a>前端开发主要有哪些层，语言和功能是什么？</h2><ol><li>HTML<ul><li>结构层  搭建骨架、描述页面语义</li></ul></li><li>CSS<ul><li>样式层</li></ul></li><li>Javascript<ul><li>行为层  表单验证、数据交互、数据收发等</li></ul></li></ol><h2 id="变量声明提升（面试题）"><a href="#变量声明提升（面试题）" class="headerlink" title="变量声明提升（面试题）"></a><strong>变量声明提升（面试题）</strong></h2><ol><li>你可以提前使用一个稍后才声明的变量，而不会引发异常</li><li>在执行所有代码前，JS有预解析阶段，会预读所有变量的定义</li><li>只提升定义，并不提升值</li><li>var 关键词可以变量提升， let 并不能</li><li>在实际开发中，一定要先定义变量赋值，再使用。</li></ol><h2 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h2><ol><li>要定义变量，第一步就是声明它，并给它赋值</li><li>变量是计算机语言中能存储计算结果或能表示值抽象概念</li><li>变量不是数值本身，它们仅仅是一个用于存储数值的容器</li><li>标识符的命名规则（函数、类名、对象的属性也要遵守这个规则）<ul><li><strong>变量名大小写敏感，a和A两个不同的变量</strong></li><li><strong>不能是关键词或保留词</strong></li><li><strong>只能由字母、数字、下划线、$组成，但不能以数字开头</strong></li></ul></li><li>优秀的变量命名法<ul><li>驼峰命名法 例如：mathTestScore</li><li>c风格 例如：math_test_score</li><li>匈牙利命名法 例如：iMathTestScore ，第一个字母 i，提示变量类型</li></ul></li><li>变量的默认值<ul><li>一个变量只定义，但没有赋值，默认是undefined</li></ul></li><li>等号表示赋值</li><li>同时声明多个变量<ul><li>var a&#x3D;0,b&#x3D;0;</li></ul></li><li>var 定义的变量会被挂载在 window 上，let 不会</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;输出语句&quot;&gt;&lt;a href=&quot;#输出语句&quot; class=&quot;headerlink&quot; title=&quot;输出语句&quot;&gt;&lt;/a&gt;输出语句&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;alert&lt;/li&gt;
&lt;li&gt;console&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;前端开发主要有哪些层，语言和</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Javascript" scheme="https://zhihuzeye.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS函数与DOM</title>
    <link href="https://zhihuzeye.github.io/2024/06/14/JS%E5%87%BD%E6%95%B0%E4%B8%8EDOM/"/>
    <id>https://zhihuzeye.github.io/2024/06/14/JS%E5%87%BD%E6%95%B0%E4%B8%8EDOM/</id>
    <published>2024-06-14T11:08:46.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数的基本使用"><a href="#函数的基本使用" class="headerlink" title="函数的基本使用"></a>函数的基本使用</h2><ol><li>函数的参数和返回值<ul><li>参数可多可少，用逗号分开</li><li>函数体内可以使用 return 关键词表示 “函数的返回值”</li><li>调用一个有返回值的函数，可以被当做一个普通纸，从而可以出现在哪任何可以书写值的地方</li><li>调用函数时，一旦遇见 return 语句则会立即退出函数，将执行权还给调用者</li></ul></li><li>函数的定义和调用<ul><li>和变量相似，函数必须先定义然后才能使用</li><li>使用 function 关键词定义函数，function 是“功能”的意思</li><li>函数名，必须符合JS标识符的命名规则</li></ul></li><li>什么是函数<ul><li>函数就是语句的封装，可以让这些代码方便的被复用</li><li>函数具有“一次定义，多次调用”的优点</li><li>使用函数，可以简化代码，让代码更具有可读性</li></ul></li><li><em><strong>函数声明的提升（面试题）</strong></em><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fun</span>()</span><br><span class="line">   <span class="comment">//  函数表达式</span></span><br><span class="line">   <span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fun</span>()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// B A</span></span><br></pre></td></tr></table></figure><ul><li>和变量声明提升类似，函数声明也可以被替身，函数表达式不能提升</li><li>变量的提升，只提升定义，不提升值。</li><li><em><strong>函数优先提升，然后再提升变量。</strong></em></li></ul></li></ol><h2 id="函数算法题"><a href="#函数算法题" class="headerlink" title="函数算法题"></a>函数算法题</h2><ol><li>函数算法题1<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【阿姆斯特朗数】 数字是 n 位数 , 该数字的每一位的 n 次方之和等于该数字本身 </span></span><br><span class="line"><span class="comment"> *  阿姆斯特朗数是指上述条件成立的任意位数的数字 水仙花数是指上述条件成立的 3 位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            result *= i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = i.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">Number</span>(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Number</span>(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">var</span> c = <span class="title class_">Number</span>(str[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">factorial</span>(a) + <span class="title function_">factorial</span>(b) + <span class="title function_">factorial</span>(c) == i) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>函数算法题2<ul><li>函数是JS的一等公民，它可以当做参数传入另一个函数</li><li>sort()函数 这个函数中的a，b分别表示数组中靠前和靠后的项，如果需要将它们交换位置，则返回任意整数，否则返回负数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">11</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="comment">// if (a &gt; b) &#123;</span></span><br><span class="line">    <span class="comment">//     return 1</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     return -1</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> b-a</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol><li>什么是递归<ul><li>函数的内部语句可以调用这个函数自身，从而发起对函数的一次迭代，在新的迭代中，又会执行调用函数自身的语句，从而又产生一次迭代，当函数执行到某一次时，不在进行新的迭代，函数被一层一层返回，函数被递归。</li><li>递归是一种较为高级的编程技巧，它把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</li><li>递归的要素<ul><li><strong>边界条件：确定递归到何时终止，也称为递归出口</strong></li><li><strong>递归模式：大问题是如何分解为小问题的，也称为 递归体</strong></li></ul></li></ul></li><li>递归常见算法题<ul><li>斐波那契数列<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>阶乘<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;n：&quot;</span>,n)</span><br><span class="line">         <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">         <span class="keyword">return</span> n * <span class="title function_">test</span>(n - <span class="number">1</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">test</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>实现深克隆<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">12</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">45</span>, [<span class="number">12</span>, <span class="number">44</span>]];</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> result = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">               result.<span class="title function_">push</span>(<span class="title function_">deepClone</span>(arr[i]))</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> arr2 = <span class="title function_">deepClone</span>(arr1);</span><br></pre></td></tr></table></figure></li></ol><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><ol><li>全局变量和局部变量<ul><li>JavaScript 是 函数作用域编程语言：变量只在其定义时所在的function内部有意义。</li><li>如果变量不定义在函数的内部，此时这个变量就是全局变量</li><li>遮蔽效应<ul><li>如果函数中也定义了和全局同名的变量，则函数内的变量会将全局的变量 “遮蔽”</li></ul></li><li>形参也是局部变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a</span>) &#123;</span><br><span class="line"> a++</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">7</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure></li><li>函数的嵌套<ul><li>一个函数内部也可以定义一个函数。和局部变量类似，定义在一个函数内部的函数时局部函数</li></ul></li><li>不加 var 将定义全局变量</li></ul></li><li>作用域链<ul><li>就是这个变量会被一层一层的（从内层到外层），去寻找它的作用域</li></ul></li><li>闭包<ul><li>什么是闭包<ul><li>Javascript 中函数会产生闭包（closure）。闭包是函数本身和该函数声明时所处的环境状态的组合。</li><li>函数能够“记忆住”其定义时所处的环境，即使函数不在其定义的环境中被调用，也能访问定义时所处环境的变量。</li></ul></li><li>观察闭包现象<ul><li>在JavaScript中，每次创建函数时都会创建闭包。但是，闭包特性往往需要将函数“换一个地方”执行，才能观察出来</li></ul></li><li>闭包非常实用<ul><li>因为它允许我们将数组与操作改数组的函数关联起来，这与“面向对象编程”有少许相似之处</li></ul></li><li>闭包的功能<ul><li>记忆性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCheckTemp</span>(<span class="params">standardTemp</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">checkTemp</span>(<span class="params">n</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (n &lt;= standardTemp) &#123;</span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&#x27;你的体温正常&#x27;</span>)</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&#x27;你的体温偏高&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> area1 = <span class="title function_">createCheckTemp</span>(<span class="number">37.1</span>)</span><br><span class="line">   <span class="keyword">var</span> area2 = <span class="title function_">createCheckTemp</span>(<span class="number">38.1</span>)</span><br><span class="line">   <span class="title function_">area1</span>(<span class="number">38</span>)</span><br><span class="line">   <span class="title function_">area2</span>(<span class="number">38</span>)</span><br></pre></td></tr></table></figure><ul><li>当闭包产生时，函数所处环境的状态会始终保持在内存中，不会在外层函数调用后被自动清除。这就是闭包的记忆性</li></ul></li><li>模拟私有变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">getA</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> a</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> a++</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">pow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> a *= <span class="number">2</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = <span class="title function_">fun</span>()</span><br><span class="line"> obj.<span class="title function_">pow</span>()</span><br><span class="line"> obj.<span class="title function_">add</span>()</span><br><span class="line"> <span class="title function_">alert</span>(obj.<span class="title function_">getA</span>())</span><br></pre></td></tr></table></figure></li><li>使用闭包的注意点<ul><li>不能滥用闭包，否则会造成网页的性能问题，严重时可能导致内存泄漏。所谓内存泄漏是指程序中以动态分贝的内存由于某种原因未释放或无法释放</li></ul></li><li><strong>闭包面试题</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           count = count + <span class="number">1</span>;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> fun1 = <span class="title function_">addCount</span>()</span><br><span class="line">   <span class="keyword">var</span> fun2 = <span class="title function_">addCount</span>()</span><br><span class="line">   <span class="title function_">fun1</span>()</span><br><span class="line">   <span class="title function_">fun2</span>()</span><br><span class="line">   <span class="title function_">fun2</span>()</span><br><span class="line">   <span class="title function_">fun1</span>()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ol><li>立即执行函数 IIFE</li><li>立即调用函数，一旦被定义，就立即被调用</li><li>形成IIFE的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行函数 </span></span><br><span class="line">+<span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用1&#x27;</span>); &#125;() </span><br><span class="line">-<span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用2&#x27;</span>); &#125;()</span><br><span class="line">~<span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用3&#x27;</span>); &#125;() </span><br><span class="line">!<span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用4&#x27;</span>); &#125;()</span><br></pre></td></tr></table></figure><ul><li>函数必须转为“函数表达式”才能被调用</li></ul></li><li>IIFE的作用<ul><li>为变量赋值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">var</span> sex = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> title = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;小朋友&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="string">&#x27;男&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;先生&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;女士&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">    <span class="title function_">alert</span>(title)</span><br></pre></td></tr></table></figure></li><li>将全局变量变为局部变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">         (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">             arr.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                 <span class="title function_">alert</span>(i)</span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;)(i)</span><br><span class="line">     &#125;</span><br><span class="line">     arr[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数的基本使用&quot;&gt;&lt;a href=&quot;#函数的基本使用&quot; class=&quot;headerlink&quot; title=&quot;函数的基本使用&quot;&gt;&lt;/a&gt;函数的基本使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;函数的参数和返回值&lt;ul&gt;
&lt;li&gt;参数可多可少，用逗号分开&lt;/li&gt;
&lt;li&gt;函数体内</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Javascript" scheme="https://zhihuzeye.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM</title>
    <link href="https://zhihuzeye.github.io/2024/06/13/DOM/"/>
    <id>https://zhihuzeye.github.io/2024/06/13/DOM/</id>
    <published>2024-06-13T15:24:33.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM-基本概念"><a href="#DOM-基本概念" class="headerlink" title="DOM 基本概念"></a>DOM 基本概念</h2><ol><li>DOM 是操控 HTML和CSS的桥梁</li><li>DOM (Doucument Object Model) 文档对象类型，是Javascript操作HTML文档的接口，使文档操作变得非常优雅简便</li><li>DOM最大的特点是将文档表示为节点树</li></ol><h2 id="节点访问和位置关系"><a href="#节点访问和位置关系" class="headerlink" title="节点访问和位置关系"></a>节点访问和位置关系</h2><ol><li>访问元素节点<ul><li>访问元素节点的常用方法<ul><li><code>document.getElementById()</code><ul><li>通过id得到元素<ul><li>如果页面上有相同id的元素，则只能得到一个</li><li>不管元素藏得多深，都能把它找到</li><li>延迟运行<ul><li>通常JS 一定要写到HTML的节点后面，否则JS无法找到相应的HTML节点</li><li>可以使用 window.onload &#x3D; function(){} 事件 ,使页面加载完后再执行指定代码</li></ul></li></ul></li></ul></li><li><code>document.getElementsByTagName()</code><ul><li>通过标签名称得到元素数组</li></ul></li><li><code>document.getElementsByClassName()</code><ul><li>通过类名得到元素数组</li></ul></li><li><code>document.querySelector()</code><ul><li>通过选择器得到元素</li></ul></li><li><code>document.querySelectorAll()</code><ul><li>通过选择器得到元素数组</li></ul></li></ul></li></ul></li><li>节点的关系<ul><li>相对于父节点<ul><li>可以使用 farstChild  得到第一个子节点</li><li>可以使用 lastChild 得到最后一个子节点</li></ul></li><li>相对于子节点<ul><li>父节点可以通过使用 childNodes 得到所有的子节点信息</li><li>子节点可以通过 parentNode 来访问父节点</li><li>对于后面一个 兄弟节点 可以使用 nextSibling 获取</li><li>对于前面一个兄弟节点 可以使用 perviousSibling 获取前面一个</li></ul></li><li><strong>注意：文本节点也属于节点</strong><ul><li>文本节点也属于节点，使用节点关系时，一定要注意</li></ul></li><li>只考虑元素节点<ul><li>children</li><li>firstElementChild</li><li>lastElementChild</li><li>perviousElementSibling</li><li>nextElementSiling</li></ul></li></ul></li></ol><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ol><li>insertBefore<ul><li>父节点.insertBefore(孤儿节点,标杆节点);</li></ul></li><li>appendChild<ul><li>父节点.appendChild(内容)</li><li>在尾部追加</li></ul></li><li>改变元素节点的CSS样式<ul><li><code>oBox.style.fontSize  = &#39;32px&#39;</code></li></ul></li><li>改变元素的HTML的属性<ul><li>W3C 属性 直接，元素.属性 &#x3D; 属性值</li><li>非标准 W3C 属性 <ul><li>元素.setAttribute(key,value)</li><li>元素.getAttribute(key)</li></ul></li></ul></li></ol><h2 id="nodeType常用属性值"><a href="#nodeType常用属性值" class="headerlink" title="nodeType常用属性值"></a>nodeType常用属性值</h2><ul><li>1  <code>元素节点，例如&lt;p&gt; 和 &lt;div&gt;</code></li><li>3  <code>文字节点</code></li><li>8  <code>注释节点</code></li><li>9  <code>document节点</code></li><li>10  <code>DTD节点</code></li></ul><h2 id="节点的创建、移除和克隆"><a href="#节点的创建、移除和克隆" class="headerlink" title="节点的创建、移除和克隆"></a>节点的创建、移除和克隆</h2><ol><li>createElement<ul><li>创建一个指定tagname的HTML元素</li></ul></li><li>获取body节点<ul><li>document.body</li></ul></li><li>获取html节点<ul><li>document.documentElement</li></ul></li><li>移动节点<ul><li>新父节点.appendChild(已经有父亲的节点)</li><li>新父节点.insterBefore(已经有父亲的节点,标杆子节点)</li></ul></li><li>删除节点<ul><li>父节点.removeChild(要删除的子节点)</li><li><strong>节点不能主动删除自己，必须由父节点删除它</strong></li></ul></li><li>克隆节点<ul><li>cloneNode() 方法可以克隆节点，克隆出的节点是“孤儿节点”</li><li>var 孤儿节点 &#x3D; 老节点.cloneNode(true|false);</li><li>cloneNode 参数是一个布尔值，表示是否采用深度克隆；如果为true该节点的所有后代节点也都会被克隆，如果为false，则只克隆该节点本身</li></ul></li><li>访问元素节点<ul><li>所谓 ”访问“元素节点，就是指”得到“、”获取“页面上的元素节点。</li><li>访问元素节点 主要依赖于 document</li></ul></li></ol><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><ol><li>事件监听<ul><li>什么是“事件监听”<ul><li>DOM允许我们书写Javascript代码以让HTML元素对事件做出反应</li><li>什么是”事件”：用户与网页的交互动作<ul><li>点用户点击元素的时候</li><li>点鼠标移动到元素的时候</li><li>当网页加载完成的时候…</li></ul></li><li>“监听”,顾名思义就是让计算机随时能够发现这个事件发生了，从而执行程序员预先编写的一些程序</li><li>设置事件监听的方法主要有 onxxx 和 addEventListener()</li></ul></li><li>常见鼠标事件监听<ul><li><code>onclick 当鼠标点击某个对象</code></li><li><code>ondblclick 当鼠标双击某个对象</code></li><li><code>onmousedown 当某个鼠标按键在某个对象上被按下</code></li><li><code>onmouseup 当某个鼠标按键在某个对象上被松开</code></li><li><code>onmousemove 当某个鼠标按键在某个对象上被移动</code></li><li><code>onmouseenter 当鼠标进入某个对象</code></li><li><code>onmouseleave 当鼠标离开某个对象</code></li></ul></li><li>常见的键盘事件监听<ul><li><code>onkeyperss 当某个键盘的键被按下（系统按钮如箭头键和功能键无法得到识别）</code></li><li><code>onkeydown 当某个键盘的键被按下（系统按钮可以识别，并且会优先onkeypress发生）</code></li><li><code>onkeyup 当某个键盘的键被松开</code></li></ul></li><li>常见的表单事件监听<ul><li><code>onchange 当用户改变域的内容</code></li><li><code>onfocus 当某个元素获得焦点（比如tab或鼠标点击）</code></li><li><code>onblur 当元素失去焦点</code></li><li><code>onsubmit 当表单被提交</code></li><li><code>onreset 当表单被重置 </code></li><li><code>oninput 当用户输入</code></li></ul></li><li>常见的页面事件监听<ul><li><code>onload 当页面或图像被完成加载</code></li><li><code>onunload  当用户退出页面</code></li></ul></li></ul></li><li>事件传播<ul><li>事件的传播是：先从外到内，然后再从内到外<ul><li>从外到内、捕获阶段（capturing phase）</li><li>从内到外、冒泡阶段（Bubbling phase）</li><li>onxxx 这样的写法只能监听冒泡阶段</li></ul></li><li>addEventListener() 方法<ul><li>DOM 0级：只能监听冒泡阶段<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>DOM 2级事件监听<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><ul><li><em><strong>true 监听捕获的阶段</strong></em></li><li><em><strong>false 监听冒泡阶段【默认】</strong></em></li></ul></li><li><strong>注意事项：最内部的元素不再区分捕获和冒泡阶段，会先执行写在前面的监听，然后执行后写的监听</strong></li><li><strong>注意事项：如果给元素设置相同的两个或多个同名事件，则DOM0级写法后面写的会覆盖先写的；而DOM2级会按照顺序执行</strong></li></ul></li></ul></li><li>事件对象<ul><li>什么是事件对象<ul><li>事件处理函数提供一个形式参数，它是一个对象，封装了本次事件的细节</li></ul></li><li>e.charCode 和 e.keyCode 属性<ul><li>e.charCode 属性通常用于 onkeypress 事件中，表示用户输入的字符的 “字符码”<ul><li><code>数字0 ~ 数字9  48 ~ 57</code></li><li><code>大写字母A ~ Z  65 ~ 90</code></li><li><code>小写字母 a ~ z  97 ~ 122</code></li></ul></li><li>e.keyCode 属性通常用于 onkeydown 事件和onkeyup中，表示用户按下按键的 “键码”<ul><li><code>数字0 ~ 数字9  48 ~ 57</code></li><li><code>字母部分大小写 a ~ z  65 ~ 90 （不区分大小写）</code></li><li><code>四个方向键（左、上、右、下）  37、38、39、40</code></li><li><code>回车键  13</code></li><li><code>空格键  32</code></li></ul></li></ul></li><li><em><strong>e.preventDefault() 方法</strong></em><ul><li>阻止事件产生的“默认动作”</li></ul></li><li><em><strong>e.stopPropagation() 方法</strong></em><ul><li>阻止事件继续传播</li><li>在一些场合，非常有必要切断事件继续传播，否则会造成页面特效显示出bug</li></ul></li><li>鼠标滚轮事件<ul><li>鼠标滚轮事件是 onmousewheel ，它的事件对象e提供deltaY 属性 表示鼠标滚动方向，向下滚动时返回正值，向上滚动时，返回负值。</li></ul></li></ul></li><li><strong>事件委托</strong><ul><li>批量添加事件监听的性能问题<ul><li>每一个事件监听注册都会消耗一定的系统内存，而批量添加事件会导致监听数量太多，内存消耗会非常大</li></ul></li><li>定义<ul><li>利用事件冒泡机制，将后台元素事件委托给祖先元素</li></ul></li><li>e.target 和 e.currentTarget 属性<ul><li>target<ul><li><em><strong>触发此事件的最早元素，即“事件源元素”</strong></em></li></ul></li><li>currentTarget<ul><li>事件处理程序附加到的元素</li></ul></li></ul></li><li>使用场景<ul><li>当有大量类似元素需要批量添加事件监听时，使用事件委托可以减少内存开销</li><li>当有动态元素节点上树时，使用事件委托可以让新上树的元素具有事件监听</li></ul></li><li>使用时注意事项<ul><li>onmouseenter 和 onmouseover 都表示“鼠标进入”，它们有什么区别呢？<ul><li>onmouseenter 不冒泡</li><li>onmouseover 冒泡</li></ul></li><li><em><strong>不能委托不冒泡的事件给祖先元素</strong></em></li><li>最内层的元素不能再有额外的内层元素了，比如<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DOM-基本概念&quot;&gt;&lt;a href=&quot;#DOM-基本概念&quot; class=&quot;headerlink&quot; title=&quot;DOM 基本概念&quot;&gt;&lt;/a&gt;DOM 基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM 是操控 HTML和CSS的桥梁&lt;/li&gt;
&lt;li&gt;DOM (Doucum</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://zhihuzeye.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>BOM基础</title>
    <link href="https://zhihuzeye.github.io/2024/06/12/BOM%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhihuzeye.github.io/2024/06/12/BOM%E5%9F%BA%E7%A1%80/</id>
    <published>2024-06-12T14:37:14.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BOM是什么"><a href="#BOM是什么" class="headerlink" title="BOM是什么"></a>BOM是什么</h2><ol><li>一些与浏览器改变尺寸，滚动条滚动的特效，都要借助BOM技术</li><li>BOM(Browser Object Model, 浏览器对象模型) 是JS与浏览器窗口交互的接口</li></ol><h2 id="BOM常用对象"><a href="#BOM常用对象" class="headerlink" title="BOM常用对象"></a>BOM常用对象</h2><ol><li>Window 对象<ul><li>window 对象是当前JS脚本运行所处的窗口，而这个窗口中包含DOM结构，window.document属性就是document对象</li><li>在有标签页功能的浏览器中，每个标签都拥有自己的window 对象；也就是说，同一个窗口的标签页之间不会共享一个window对象</li><li>全局变量是window变量的属性<ul><li><code>var a = 1;window.a == a   // true</code></li></ul></li><li>内置函数普遍是window的方法<ul><li><code>如setInterval、alert </code></li><li><code>window.alert ==alert // true</code></li><li><code>window.hasOwnProperty(&#39;alert&#39;) // true</code></li></ul></li></ul></li><li>Navigator 对象<ul><li>window.navgator 属性可以检索navigator对象，它内部含有用户此次活动的浏览器的相关属性和标识<ul><li>appName 浏览器官方名称</li><li>appVersion 浏览器版本</li><li>userAgent 浏览器用户代理（含有内核信息和封装壳信息）</li><li>platform 用户操作系统</li></ul></li></ul></li><li>History 对象<ul><li>window.history 对象提供了操作浏览器会话历史的接口</li><li>常用的操作就是模拟浏览器的回退按钮</li><li><code>history.back() history.go(-1)</code></li></ul></li><li>History 对象<ul><li>window.location 标识当前所在网址，可以通过给这个属性赋值命令浏览器进行页面跳转</li><li>重新加载当前页面</li><li>可以调用location的reload方法以重新加载当前页面，参数true标识强制从服务器加载</li><li>GET请求查询参数<ul><li>window.location.search 属性即为当前浏览器的GET请求查询参数</li></ul></li></ul></li><li>窗口尺寸相关属性<ul><li>innerHeight<ul><li>浏览器窗口的内容区域的高度，包含水平滚动条（如果有的话）</li></ul></li><li>innerWidth<ul><li>浏览器窗口的内容区域宽度，包含垂直滚动条（如果有的话）</li></ul></li><li>outerHeight<ul><li>浏览器窗口的外部高度</li></ul></li><li>outerWidth<ul><li>浏览器窗口的外部宽度</li></ul></li><li>获得不包含滚动条的窗口宽度，要用 document.documentElement.clientWidth</li><li>resize 事件<ul><li>在窗口大小改变以后，就会触发resize事件，可以使用window.onresize或者window.addEventListener(‘resize’) 来绑定事件处理函数</li></ul></li><li>已卷动高度<ul><li>window.scrollY 属性表示在垂直方向已滚动的像素值</li></ul></li><li>已动高度<ul><li>document.documentElement.scrollTop 属性也表示窗口卷动高度</li><li>document.documentElement.scrollTop 不是只读的，window.scrollY 属性是只读的</li></ul></li><li>scroll事件<ul><li>在窗口被卷动之后，就会触发scroll事件，可以使用 window.onscroll 或者 window.addEventListener(‘scroll’) 来绑定事件处理函数</li></ul></li><li>DOM元素都有offsetTop属性，表示此元素定位到祖先元素的垂直距离<ul><li>定位祖先元素：在祖先中，离自己最近的且拥有定位属性的元素</li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BOM是什么&quot;&gt;&lt;a href=&quot;#BOM是什么&quot; class=&quot;headerlink&quot; title=&quot;BOM是什么&quot;&gt;&lt;/a&gt;BOM是什么&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一些与浏览器改变尺寸，滚动条滚动的特效，都要借助BOM技术&lt;/li&gt;
&lt;li&gt;BOM(Brows</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JavaScript" scheme="https://zhihuzeye.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>文本与字体属性</title>
    <link href="https://zhihuzeye.github.io/2024/06/12/%E6%96%87%E6%9C%AC%E4%B8%8E%E5%AD%97%E4%BD%93%E5%B1%9E%E6%80%A7/"/>
    <id>https://zhihuzeye.github.io/2024/06/12/%E6%96%87%E6%9C%AC%E4%B8%8E%E5%AD%97%E4%BD%93%E5%B1%9E%E6%80%A7/</id>
    <published>2024-06-12T14:26:19.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用文本样式属性"><a href="#常用文本样式属性" class="headerlink" title="常用文本样式属性"></a>常用文本样式属性</h2><ol><li>color<ul><li>设置文本内容的前景色<ul><li>RGBA ，最后一个表示透明度，0表示纯透明，1表示纯实心</li></ul></li><li>16进制，RGB，RGBA</li><li><strong>如果颜色值是#aabbcc的形式，可以简写为#abc</strong><ul><li>#ff0000 -&gt; #f00</li></ul></li></ul></li><li>font-size<ul><li>设置字号，单位通常px</li></ul></li><li>font-weight<ul><li>normal  正常粗细，与400等值</li><li>bold  加粗，与700等值</li><li>lighter  更细，大多数中文字体不支持</li><li>bolder  更粗，大多数中文字体不支持</li></ul></li><li>font-style<ul><li>normal  取消倾斜，比如把天生倾斜的i、em等标签设置为不倾斜</li><li>italic  设置为倾斜字体（常用）</li><li>oblique  设置为倾斜字体（用常规字体模拟，不常用）</li></ul></li><li>text-decoration<ul><li>none  没有修饰线</li><li>underline  下划线</li><li>line-through  删除线</li></ul></li></ol><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><ol><li>color</li><li>font-开头的</li><li>list-开头的</li><li>text-开头的</li><li>line-开头的</li><li><em><strong>因为文字相关属性有继承性，所以通常会设置body标签的字号、颜色、行高等，这样就能当做整个网页的默认样式了</strong></em></li><li><em><strong>在继承的情况下，选择器权重计算失效，而是“就近原则”，继承的不如元素选中的权重大</strong></em></li></ol><h2 id="字体属性详解"><a href="#字体属性详解" class="headerlink" title="字体属性详解"></a>字体属性详解</h2><ol><li>font-family<ul><li>字体可以是列表形式，一般英语字体放前面，后面的字体是前面字体的“后备”字体</li><li>font-family: serif, “Times New Roman”, “微软雅黑”;</li><li>字体名称中有空格，必须用引号包裹</li><li>中文字体可以称呼它们的英语名字<ul><li>“Microsoft Yahei”  等同于 “微软雅黑”</li><li>“SimSun” 等价于 “宋体”</li></ul></li><li><strong>字体通常必须是用户计算机中已经安装好的字体</strong></li><li>定义新字体，需要我们有新字体  @font-face</li></ul></li></ol><h2 id="段落和行相关属性"><a href="#段落和行相关属性" class="headerlink" title="段落和行相关属性"></a>段落和行相关属性</h2><ol><li>text-indent 属性<ul><li>定义文本内容首行缩进量</li></ul></li><li>line-height<ul><li>定义行高</li><li>line-height:30px</li><li>line-height:1.5  字号的倍数</li><li>line-height:150%   字号的倍数</li></ul></li><li>单行文本垂直居中<ul><li>行高&#x3D;盒子高度，即可实现单行文本的垂直居中</li></ul></li><li>text-align:center<ul><li>文字水平居中</li></ul></li><li>font 合写属性<ul><li>font: italic bold 20px&#x2F;1.5 “阿里妈妈刀隶体 Regular”;</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用文本样式属性&quot;&gt;&lt;a href=&quot;#常用文本样式属性&quot; class=&quot;headerlink&quot; title=&quot;常用文本样式属性&quot;&gt;&lt;/a&gt;常用文本样式属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;color&lt;ul&gt;
&lt;li&gt;设置文本内容的前景色&lt;ul&gt;
&lt;li&gt;RGBA ，最</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>盒模型</title>
    <link href="https://zhihuzeye.github.io/2024/06/12/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>https://zhihuzeye.github.io/2024/06/12/%E7%9B%92%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-06-12T14:11:47.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识盒模型"><a href="#认识盒模型" class="headerlink" title="认识盒模型"></a>认识盒模型</h2><ol><li>行内元素</li><li>块级元素</li><li>所有HTML标签都可以看成矩形盒子，由width、height、padding、border构成，称为“盒模型”</li></ol><h2 id="width和height属性详解"><a href="#width和height属性详解" class="headerlink" title="width和height属性详解"></a>width和height属性详解</h2><ol><li>width<ul><li>盒子内容的宽度</li><li>width属性通常是px，移动端开发会涉及百分数，rem等单位</li><li>当块级元素（div、h系列、li等）没有设置width属性是，它将自动撑满，但这并不意味着width可以继承</li></ul></li><li>height<ul><li>表示内容的高度</li><li>width属性通常是px，移动端开发会涉及百分数，rem等单位</li><li>盒子的height属性如果不设置，它将被内容被自动撑开，如果没有内容，则height默认是0</li><li>高度省略掉，内容能被自动撑开</li></ul></li></ol><h2 id="padding属性详解"><a href="#padding属性详解" class="headerlink" title="padding属性详解"></a>padding属性详解</h2><ol><li>padding 是盒子的内边距，即盒子边框内壁到文字的距离</li><li>padding 是四个方向的<ul><li>padding-top</li><li>padding-left</li><li>padding-right</li><li>padding-bottom</li></ul></li><li>padding 四数值写法<ul><li>padding:10px 20px 10px 20px 上右下左</li></ul></li><li>padding 三数值写法 <ul><li><em><strong>padding:10px 20px 30px  上 左右 下</strong></em></li></ul></li><li>padding 二数值写法<ul><li>padding:10px 20px 上下，左右</li></ul></li><li>padding 一数值写法<ul><li>padding:10px  四个方向都是10px</li></ul></li></ol><h2 id="margin属性详解"><a href="#margin属性详解" class="headerlink" title="margin属性详解"></a>margin属性详解</h2><ol><li>margin是盒子的外边距，盒子和其它盒子之间的距离</li><li>margin 是四个方向的<ul><li>margin-top</li><li>margin-left</li><li>margin-right</li><li>margin-bottom</li></ul></li><li>margin 四个方向<ul><li>margin:10px 20px 10px 20px 上右下左</li></ul></li><li>margin 三数值写法 <ul><li><em><strong>margin:10px 20px 30px  上 左右 下</strong></em></li></ul></li><li>margin 二数值写法<ul><li>margin:10px 20px 上下，左右</li></ul></li><li>margin 一数值写法<ul><li>margin:10px  四个方向都是10px</li></ul></li><li>margin 的塌陷<ul><li>垂直方向的margin有塌陷现象：小的margin 会塌陷到大的margin 中，从而margin不叠加，只以大的值为准<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.box5</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> <span class="selector-class">.box6</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">28</span>, <span class="number">206</span>, <span class="number">108</span>);</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">以<span class="attribute">margin-top</span> <span class="number">32px</span> 为准</span><br></pre></td></tr></table></figure></li><li>左右方向不会发生塌陷现象</li></ul></li><li>一些元素有默认的margin<ul><li>比如（body、ul、p) 等，在开始制作网页的时候，要将它们清除<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> *&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">body</span>,</span><br><span class="line">    <span class="selector-tag">ul</span>,</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">* 通配符有效率问题</span><br></pre></td></tr></table></figure></li></ul></li><li>盒子的水平居中<ul><li>将盒子左右两边的margin都设置为auto，盒水平居中 </li><li>margin:0 auto</li><li>文本居中 text-align:center 和盒子水平居中是两个概念</li></ul></li></ol><h2 id="盒模型计算"><a href="#盒模型计算" class="headerlink" title="盒模型计算"></a>盒模型计算</h2><ol><li>盒子的总宽度 &#x3D; width + 左右border + 左右padding</li><li>盒子的总高度 &#x3D; height + 上下border + 上下padding</li></ol><h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><ol><li>将盒子添加 box-sizing:border-box 之后，padding、border 变为内缩，不再外扩</li></ol><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><ol><li>行内元素<ul><li>能并排显示</li><li>不能设置宽高</li><li>width自动收缩</li><li>a、span、em、b、u、i 等</li></ul></li><li>块级元素<ul><li>不能并排显示</li><li>能设置宽高</li><li>width自动撑满</li><li>div、section、header、h系列、li、ul等</li></ul></li><li>行内块元素<ul><li>img、input等</li><li>既能并排显示、又能设置宽高</li></ul></li><li>行内元素和块级元素的互相转换<ul><li>display:block<ul><li>转换为块级元素</li></ul></li><li>display:inline <ul><li>转为行内元素</li></ul></li><li>disaplay:inline-block <ul><li>即将元素转为行内块</li></ul></li><li>display:none<ul><li>可以将元素隐藏，元素将彻底放弃位置，如同没有写标签一样</li></ul></li><li>visibility:hidden<ul><li>也可以将元素隐藏，但是元素不放弃自己的位置</li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识盒模型&quot;&gt;&lt;a href=&quot;#认识盒模型&quot; class=&quot;headerlink&quot; title=&quot;认识盒模型&quot;&gt;&lt;/a&gt;认识盒模型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;行内元素&lt;/li&gt;
&lt;li&gt;块级元素&lt;/li&gt;
&lt;li&gt;所有HTML标签都可以看成矩形盒子，由width</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>过渡与动画</title>
    <link href="https://zhihuzeye.github.io/2024/06/12/%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
    <id>https://zhihuzeye.github.io/2024/06/12/%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/</id>
    <published>2024-06-12T13:52:21.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过渡（最低支持-IE10）"><a href="#过渡（最低支持-IE10）" class="headerlink" title="过渡（最低支持 IE10）"></a>过渡（最低支持 IE10）</h2><ol><li>过渡的基本使用<ul><li>transition 过渡属性是CSS3浓墨重彩的特性，过渡可以为一个元素在不同的样式之间变化自动添加“补间动画”</li><li>优点：动画更细腻，内存开销小</li><li>transition: width 1s linear 0s;<ul><li>如果所有属性要参与过渡，可以写 all</li></ul></li><li><em><strong>参数说明：什么属性需要过渡，动画时长，变化速度曲线，延迟时间</strong></em><br>  过渡的四个小属性<ul><li>transition-duration 动画时间</li><li>transition-property 哪些属性要过渡</li><li>transition-timing-function 动画变化曲线（缓动效果）<ul><li>ease</li><li>linear</li><li>ease-in</li><li>ease-out</li><li>ease-in-out</li><li>贝塞尔曲线<ul><li>可以通过 <a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a> 这个网址自定义动画缓动参数</li></ul></li></ul></li><li>transition-delay 延迟时间</li></ul></li><li>哪些属性可以参与过渡？<ul><li>所有数值属性都可以参与过渡，比如<ul><li>width</li><li>height</li><li>left</li><li>top</li><li>border-radius</li></ul></li><li>背景颜色和文字颜色都可以被过渡</li><li>所有变形（包括2D和3D）都能被过渡</li></ul></li></ul></li><li>过渡的缓动效果（参考 transition-timing-function 属性）</li></ol><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ol><li>动画的定义和调用<ul><li><p>可以使用 @keyframes 来定义动画，keyframes 表示“关键帧”，在项目上线前，要补上@-webkit-这样的私有前缀</p></li><li><p>定义动画后，就可以用 animation 属性调用动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画的定义<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> r&#123;</span></span><br><span class="line"><span class="language-css">          <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">              <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">          &#125;</span></span><br><span class="line"><span class="language-css">          <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">              <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">          &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">animation</span>: r <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>animation: r 1s ease 3s 3; </code></p><ul><li>动画的参数：动画的名称，执行的时间，动画效果，延迟时间，执行次数</li><li>如果想永远设置执行就是 infinite 属性</li><li>如果想让动画的第2、4、6…..（偶数次）自动逆向执行，那么要加上 alternate 参数即可</li><li>如果想让动画停止在最后结束状态，那么要加上 forwards</li></ul></li><li><p>多关键帧动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> changeColor &#123;</span><br><span class="line">     <span class="number">0%</span> &#123;</span><br><span class="line">         <span class="attribute">background-color</span>: red;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="number">50%</span> &#123;</span><br><span class="line">         <span class="attribute">background-color</span>: yellow;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="number">100%</span> &#123;</span><br><span class="line">         <span class="attribute">background-color</span>: aqua;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过渡（最低支持-IE10）&quot;&gt;&lt;a href=&quot;#过渡（最低支持-IE10）&quot; class=&quot;headerlink&quot; title=&quot;过渡（最低支持 IE10）&quot;&gt;&lt;/a&gt;过渡（最低支持 IE10）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;过渡的基本使用&lt;ul&gt;
&lt;li&gt;tran</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>多媒体与语义化标签</title>
    <link href="https://zhihuzeye.github.io/2024/06/12/%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8E%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
    <id>https://zhihuzeye.github.io/2024/06/12/%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8E%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</id>
    <published>2024-06-12T13:37:30.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="audio标签（兼容到IE9）"><a href="#audio标签（兼容到IE9）" class="headerlink" title="audio标签（兼容到IE9）"></a>audio标签（兼容到IE9）</h2><ol><li>属性<ul><li>autoplay（某些浏览器不支持自动播放、本地自动播放是可以的）</li><li>loop （重复播放）</li></ul></li></ol><h2 id="video-标签（兼容到IE9）"><a href="#video-标签（兼容到IE9）" class="headerlink" title="video 标签（兼容到IE9）"></a>video 标签（兼容到IE9）</h2><ol><li>属性<ul><li>同 audio 标签</li><li>width 视频播放器宽度</li></ul></li></ol><h2 id="大纲标签（区块标签）"><a href="#大纲标签（区块标签）" class="headerlink" title="大纲标签（区块标签）"></a>大纲标签（区块标签）</h2><ol><li>section 文档的区域，语义比div大</li><li>article 文档的核心文章内容，会被搜索引擎主要抓取</li><li>nav 导航条</li><li>footer 页脚</li><li>aside 文档的非必要相关内容，比如广告等</li><li>main 网页核心部分</li><li>header 页头</li></ol><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><ol><li>span 文本中的区块标签</li><li>b 加粗标签</li><li>i 斜体标签</li><li>u 下划线标签</li><li>strong 加粗标签</li><li>em 斜体标签</li><li>mark 标记标签</li><li>figure-figcaption 用于表示图片和图片的标题</li></ol><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><ol><li>a 标签<ul><li>1、a 标签 anchor 锚 的首字母<br>2、hypertext reference 超文本引用<br>3、title 用于设置鼠标的悬停文本</li><li>属性<ul><li>href 超文本引用</li><li>target<ul><li>_blank 在新窗口或新标签页中打开链接。</li><li>_self 在父级框架中打开链接。</li><li>_top 在当前窗口中打开链接（默认值）。</li><li>_parent 在顶级框架中打开链接。</li></ul></li><li>title 用于设置鼠标的悬停文本</li></ul></li><li>说明<ul><li>mailto:me.test.com 邮件</li><li>tel:135555555555 拨打电话</li><li>#top 回到顶部</li></ul></li></ul></li><li>img 标签<ul><li>src</li><li>width、height</li><li>alt  alternate 替代品的缩写，它是图像的描述，不是强制性的(有利于搜索引擎优化)</li><li>title 鼠标悬停时候显示</li><li>class、style 设置样式用</li><li>loading  指定图像加载方式，可选值有”eager”（立即加载）和”lazy”（延迟加载）。</li><li>decoding  指定图像解码方式，可选值有”async”（异步解码）和”sync”（同步解码）。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;audio标签（兼容到IE9）&quot;&gt;&lt;a href=&quot;#audio标签（兼容到IE9）&quot; class=&quot;headerlink&quot; title=&quot;audio标签（兼容到IE9）&quot;&gt;&lt;/a&gt;audio标签（兼容到IE9）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;属性&lt;ul&gt;
&lt;li&gt;a</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>表格标签</title>
    <link href="https://zhihuzeye.github.io/2024/06/12/%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE/"/>
    <id>https://zhihuzeye.github.io/2024/06/12/%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE/</id>
    <published>2024-06-12T13:34:38.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ol><li>tr</li><li>td<ul><li>colspan 用来设置 td 或者 th 的列跨度</li><li>rowspan 用来设置 td 或者 th 的行跨度</li></ul></li><li>thead&#x2F;th<ul><li>标题小格（td 和 th 是同一级别的）</li><li>colspan  用来设置 td 或者 th 的列跨度</li><li>rowspan  用来设置 td 或者 th 的行跨度</li></ul></li><li>tbody</li><li>tfooter</li><li>caption<ul><li>表格的标题</li></ul></li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol><li>border <ul><li>1</li><li>2</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;table&quot;&gt;&lt;a href=&quot;#table&quot; class=&quot;headerlink&quot; title=&quot;table&quot;&gt;&lt;/a&gt;table&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;tr&lt;/li&gt;
&lt;li&gt;td&lt;ul&gt;
&lt;li&gt;colspan 用来设置 td 或者 th 的列跨度&lt;/l</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>表单元素</title>
    <link href="https://zhihuzeye.github.io/2024/06/06/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/"/>
    <id>https://zhihuzeye.github.io/2024/06/06/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/</id>
    <published>2024-06-06T05:57:01.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ol><li>type<ul><li>color 颜色选择控件</li><li>date、time 日期时间选择控件</li><li>email 电子邮件输入控件</li><li>file 文件选择控件</li><li>number 数字输入控件</li><li>range 拖拽条</li><li>search 搜索框</li><li>url 网址输入控件</li><li>button 按钮</li><li>submit 提交，在外层为 form 情况下有效</li><li>reset 重置</li><li>password 密码</li><li>radio 单选按钮需要名称设置为一样的</li><li>checkbox 多选按钮需要名称设置为一样的</li><li>hidden 对用户不可见，隐藏字段</li></ul></li><li>placeholder 提示符</li><li>value 值 是否禁用</li><li>disabled 是否必填，在外层是form表单情况下有效</li><li>required</li><li>name</li><li>id</li><li>list<ul><li>设置预选项（list&#x3D;”province-list”）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;province-list&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;浙江杭州&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;河北石家庄&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;浙江温州&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><ol><li>name</li><li>id</li><li>cols 一行显示多少字符</li><li>rows 一列显示多少字符</li><li>placeholder 提示符</li></ol><h2 id="select-option"><a href="#select-option" class="headerlink" title="select&#x2F;option"></a>select&#x2F;option</h2><ol><li>select</li></ol><ul><li>name</li><li>id</li><li>disable 是否禁用</li><li>multiple 选项是否支持多选</li><li>required 是否必填</li><li>autofocus 自动获取焦点</li><li>autocomplete 自动完成</li></ul><h2 id="fieldset-legend"><a href="#fieldset-legend" class="headerlink" title="fieldset&#x2F;legend"></a>fieldset&#x2F;legend</h2><ol><li>即输入区加有文字的边框。</li><li>定义域的标题，即边框上的文字。</li></ol><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><ol><li>定义一个按钮。</li></ol><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><ol><li>定义一个控制的标签。如输入框前的文字，用以关联用户的选择。</li><li>for</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;input&quot;&gt;&lt;a href=&quot;#input&quot; class=&quot;headerlink&quot; title=&quot;input&quot;&gt;&lt;/a&gt;input&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;type&lt;ul&gt;
&lt;li&gt;color 颜色选择控件&lt;/li&gt;
&lt;li&gt;date、time 日期时间选择控</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
    <category term="CSS3" scheme="https://zhihuzeye.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>边框与圆角</title>
    <link href="https://zhihuzeye.github.io/2024/06/06/%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92/"/>
    <id>https://zhihuzeye.github.io/2024/06/06/%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92/</id>
    <published>2024-06-06T05:52:45.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><ol><li><code>box-shadow: 10px 20px 30px rgba(0, 0, 0, .4);</code></li><li>inset（内阴影，可选），x偏移，y偏移，模糊量，阴影延展（可选），颜色</li><li>可以用逗号隔开多个阴影<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">box-shadow</span>: inset <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>),<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">#ff0000</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ol><li><code>border-top</code></li><li><code>border-bottom</code></li><li><code>border-left</code></li><li><code>border-right</code></li><li><code>border-方向-style 边框线形</code></li><li><code>border-方向-width 边框宽度</code></li><li><code>border-方向-color 边框颜色</code></li><li><code>border-方向:none 去掉边框</code></li><li><code>利用border制作三角形</code><ul><li><code>width: 0; height: 0; border: 20px solid transparent; margin-top: 50px; border-top-color: #ff0000;</code></li></ul></li><li><code>边框的三要素</code><ul><li><em><strong>线宽度、线型、线颜色</strong></em><ul><li>solid 实线</li><li>dotted 虚线（圆）</li><li>double 双边</li><li>dashed 虚线（矩形）</li></ul></li><li><code>border:1px solid #ff0</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;盒子阴影&quot;&gt;&lt;a href=&quot;#盒子阴影&quot; class=&quot;headerlink&quot; title=&quot;盒子阴影&quot;&gt;&lt;/a&gt;盒子阴影&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;box-shadow: 10px 20px 30px rgba(0, 0, 0, .4);&lt;/cod</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
    <category term="CSS3" scheme="https://zhihuzeye.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>背景和渐变</title>
    <link href="https://zhihuzeye.github.io/2024/06/06/%E8%83%8C%E6%99%AF%E5%92%8C%E6%B8%90%E5%8F%98/"/>
    <id>https://zhihuzeye.github.io/2024/06/06/%E8%83%8C%E6%99%AF%E5%92%8C%E6%B8%90%E5%8F%98/</id>
    <published>2024-06-06T05:42:30.000Z</published>
    <updated>2024-06-14T11:55:03.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景基础知识"><a href="#背景基础知识" class="headerlink" title="背景基础知识"></a>背景基础知识</h2><ol><li>背景颜色基础知识<ul><li><code>background-color: ;</code></li><li>背景颜色可以用十六进制，rgba,rgb,表示</li><li>padding 是有背景颜色的</li></ul></li><li>背景图片基础知识<ul><li>用来设置背景图片。 background-image: url();</li><li>可以是相对路径，绝对路径，网络图片</li></ul></li></ol><h2 id="背景图片高级属性"><a href="#背景图片高级属性" class="headerlink" title="背景图片高级属性"></a>背景图片高级属性</h2><ol><li>背景图片的重复模式<ul><li>background-repeat 属性可以用来设置背景的重复模式</li><li>repeat x,y均平铺（默认）</li><li>repeat-x x轴平铺</li><li>repeat-y y轴平铺</li><li>no-repeat 不平铺</li></ul></li><li>背景尺寸<ul><li>background-size: 100px 100px; 宽，高</li><li>设置背景图片尺寸，兼容到IE9</li><li>值也可以用百分比来表示，表示盒子宽高分别百分之多少。</li><li>需要等比例设置的值，可以设置auto</li><li>contain和cover<ul><li>background-size: contain; 表示将背景图片只能改变尺寸以容纳到盒子里</li><li>cover表示将背景图片智能改变尺寸以撑满盒子</li></ul></li></ul></li><li>背景裁切<ul><li>background-clip 属性用来设置元素的背景裁切到哪个盒子。兼容到IE9<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box5</span>&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> dotted <span class="number">#000</span>;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./images/niaochao.jpg&#x27;</span>);</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">background-clip</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>border-box 背景延伸至边框（默认值）</li><li>padding-box  背景延伸至内边（padding)，不会绘制边框处（仅在dotted、dashed边框可察觉）</li><li>content-box 背景被裁剪至内容区</li></ul></li><li>背景固定<ul><li>background-attachment 属性决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">       <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./images/gugong.jpg&#x27;</span>);</span><br><span class="line">       <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>fixed 自己滚动条不动，外部滚动条不动</li><li>local 自己滚动条动，外部滚动条动</li><li>scroll 自己滚动条不动，外部滚动条动（默认值）</li></ul></li><li>用途：视差滚动特效</li></ul></li><li>背景图片位置<ul><li><code>background-position: 100px 200px;</code></li><li>设置背景图片在盒子的位置</li><li>可以用位置描述符  top left right bottom</li></ul></li><li>background综合属性<ul><li><code>background: white url(&quot;images/goblin.png&quot;) no-repeat center center;</code></li><li>背景颜色，背景图片，背景重复，背景位置</li></ul></li></ol><h2 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h2><ol><li>线性渐变<ul><li><code>background-image: linear-gradient(to right, blue, red);</code></li><li>渐变方向，开始颜色，结束颜色</li><li>渐变方向可以写成度数，比如45deg</li><li>可以有多个颜色值，并且可以用百分数定义它们出现的位置  <code>linear-gradient(to bottom,blue,yellow 20%,red)</code></li><li>浏览器私有前缀<ul><li>Chrome -webkit-</li><li>Firefox -moz-</li><li>IE、Edge  -ms-</li><li>欧朋  -o-</li></ul></li></ul></li><li>径向渐变<ul><li>盒子可以使用 background-image: radial-gradient(50% 50%,red,blue); 创建径向渐变</li><li>参数：圆心坐标，颜色，颜色，颜色</li></ul></li></ol><h2 id="CSS精灵（雪碧图，前端优化方案之一）"><a href="#CSS精灵（雪碧图，前端优化方案之一）" class="headerlink" title="CSS精灵（雪碧图，前端优化方案之一）"></a>CSS精灵（雪碧图，前端优化方案之一）</h2><ol><li>CSS精灵：将多个小图标合并制作到一张图片上，使用background-position属性单独展示其中一个，这样的技术叫做CSS精灵技术，也叫做CSS雪碧图</li><li>减少HTTP请求数，加快网页速度，缺点：不方便测量，后期修改不方便</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景基础知识&quot;&gt;&lt;a href=&quot;#背景基础知识&quot; class=&quot;headerlink&quot; title=&quot;背景基础知识&quot;&gt;&lt;/a&gt;背景基础知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;背景颜色基础知识&lt;ul&gt;
&lt;li&gt;&lt;code&gt;background-color: ;&lt;/code</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
    <category term="CSS3" scheme="https://zhihuzeye.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Java 字符串</title>
    <link href="https://zhihuzeye.github.io/2024/06/06/Java-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://zhihuzeye.github.io/2024/06/06/Java-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-06-06T03:30:30.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String-和-StringBuilder"><a href="#String-和-StringBuilder" class="headerlink" title="String 和 StringBuilder"></a>String 和 StringBuilder</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>如何创建 String 对象<ul><li>String s1  &#x3D; “test”</li><li>String s2 &#x3D; new String();</li><li>String s3 &#x3D; new String(“test”)</li></ul></li><li>String 对象的常用方法</li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>[<code>charAt(int index)</code>]</td><td>返回指定索引位置的字符</td></tr><tr><td>[<code>concat(String str)</code>]</td><td>将指定字符串连接到该字符串的结尾</td></tr><tr><td>[<code>contains(CharSequence s)</code>]</td><td>判断是否包含指定的字符序列</td></tr><tr><td>[<code>endsWith(String suffix)</code>]</td><td>判断字符串是否以指定的后缀结束</td></tr><tr><td>[<code>equals(Object obj)</code>]</td><td>比较字符串是否相等</td></tr><tr><td>[<code>equalsIgnoreCase(String str)</code>]</td><td>比较字符串是否相等,忽略大小写</td></tr><tr><td>[<code>indexOf(int ch)</code>]</td><td>返回指定字符在该字符串中首次出现处的索引</td></tr><tr><td>[<code>indexOf(String str)</code>]</td><td>返回指定子字符串在该字符串中首次出现处的索引</td></tr><tr><td>[<code>isEmpty()</code>]</td><td>判断字符串是否为空</td></tr><tr><td>[<code>length()</code>]</td><td>返回字符串的长度</td></tr><tr><td>[<code>replace(char oldChar, char newChar)</code>]</td><td>使用新值替换字符串中出现的所有旧值</td></tr><tr><td>[<code>split(String regex)</code>]</td><td>根据给定正则表达式的匹配拆分此字符串</td></tr><tr><td>[<code>startsWith(String prefix)</code>]</td><td>判断字符串是否以指定的前缀开始</td></tr><tr><td>[<code>substring(int beginIndex)</code>]</td><td>返回一个新的字符串,它是此字符串的一个子字符串</td></tr><tr><td>[<code>toCharArray()</code>]</td><td>将此字符串转换为一个新的字符数组</td></tr><tr><td>[<code>toLowerCase()</code>]</td><td>使用默认语言环境的规则将此 String 所有字符都转换为小写</td></tr><tr><td>[<code>toUpperCase()</code>]</td><td>使用默认语言环境的规则将此 String 所有字符都转换为大写</td></tr><tr><td>[<code>trim()</code>]</td><td>返回字符串的副本,删除前导空白和尾部空白</td></tr></tbody></table><ol><li>&#x3D;&#x3D; 和 equals 方法的区别</li></ol><table><thead><tr><th>比较项</th><th><code>==</code> 运算符</th><th><code>equals()</code> 方法</th></tr></thead><tbody><tr><td>比较对象</td><td>比较两个对象的引用是否指向同一个对象(内存地址是否相同)</td><td>比较两个对象的内容是否相同</td></tr><tr><td>适用类型</td><td>基本数据类型(如 int、double 等)和引用数据类型(如 String、Integer 等)</td><td>引用数据类型(如 String、Integer 等)</td></tr><tr><td>默认行为</td><td>基本数据类型比较值是否相同,引用数据类型比较引用是否相同</td><td>对于引用数据类型,默认比较对象的内容是否相同</td></tr><tr><td>重写</td><td>不能重写</td><td>可以被子类重写以实现自定义的比较逻辑</td></tr></tbody></table><p>总的来说:</p><ul><li><strong><code>==</code> 比较的是对象的内存地址，<code>equals()</code> 比较的是对象的内容。</strong></li><li>对于基本数据类型，<code>==</code> 比较的是值是否相同。</li><li>对于引用数据类型，如果没有重写 <code>equals()</code> 方法，那么 <code>equals()</code> 方法等价于 <code>==</code>。</li><li>通常比较引用数据类型的相等性时，应该使用 <code>equals()</code> 方法，因为这样可以比较对象的内容。</li></ul><ol start="2"><li>String 的不可变性<ul><li>String 对象一旦被创建，则不能修改，是不可变的。</li><li>所谓的修改其实是创建了新的对象，所指向的内存空间不变，</li></ul></li></ol><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ol><li>与 String 区别<ul><li>String 具有不可变性，而 StringBuilder 不具备</li></ul></li><li>使用建议<ul><li>当频繁操作字符串时，使用 StringBuilder</li></ul></li><li>StringBuilder 和 StringBuffer<ul><li>二者基本相似</li><li>StringBuffer 是线程安全的，StringBuilder 则没有，所以性能略高。</li></ul></li><li>常用方法<ul><li>StringBuilder append(String str)</li><li>StringBuilder delete(int start,int end)</li><li>StringBuilder insert(int offset,String str)</li><li>StringBuilder replace(int start,int end,String str)</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;String-和-StringBuilder&quot;&gt;&lt;a href=&quot;#String-和-StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;String 和 StringBuilder&quot;&gt;&lt;/a&gt;String 和 StringBuild</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://zhihuzeye.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 包装类</title>
    <link href="https://zhihuzeye.github.io/2024/06/06/Java-%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>https://zhihuzeye.github.io/2024/06/06/Java-%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2024-06-06T03:26:11.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h2><ol><li><em><strong>基本数据类型不具有对象特征，没有属性和方法，无法对象化交互，包装类的产生就是为了解决这样的问题，通过包装类，让基本数据类型拥有属性、方法，可以对象化交互</strong></em></li><li>包装类不允许被继承，没有子类</li></ol><h2 id="包装类与基本数据类型之间的对应关系"><a href="#包装类与基本数据类型之间的对应关系" class="headerlink" title="包装类与基本数据类型之间的对应关系"></a>包装类与基本数据类型之间的对应关系</h2><p>包装类与基本数据类型</p><ul><li>byte -&gt; Byte</li><li>short -&gt; Short</li><li><strong>int -&gt; Integer</strong></li><li>long -&gt; Long</li><li>float -&gt; Float</li><li>double -&gt; Double</li><li><strong>char -&gt; Character</strong></li><li>boolean -&gt; Boolean</li><li>除了 double、float 都可以应用对象常量池的概念</li></ul><h2 id="包装类的常用方法"><a href="#包装类的常用方法" class="headerlink" title="包装类的常用方法"></a>包装类的常用方法</h2><p> <a href="https://docs.oracle.com/javase/8/docs/api/">Java 文档手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是包装类&quot;&gt;&lt;a href=&quot;#什么是包装类&quot; class=&quot;headerlink&quot; title=&quot;什么是包装类&quot;&gt;&lt;/a&gt;什么是包装类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;基本数据类型不具有对象特征，没有属性和方法，无法对象化交互，包装类的产生</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://zhihuzeye.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CSS3选择器</title>
    <link href="https://zhihuzeye.github.io/2024/06/04/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://zhihuzeye.github.io/2024/06/04/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2024-06-04T12:54:27.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h2><ul><li>（caseading style sheet、层叠式样式表）</li></ul><h2 id="前端三层"><a href="#前端三层" class="headerlink" title="前端三层"></a>前端三层</h2><ol><li>结构层 HTML<ul><li>搭建结构、放置部件、描述语义</li></ul></li><li>样式层 CSS<ul><li>美化页面、实现布局</li></ul></li><li>行为层 Javascript<ul><li>实现交互效果、数据收发、表单验证等</li></ul></li></ol><h2 id="选择器（CSS2-1）"><a href="#选择器（CSS2-1）" class="headerlink" title="选择器（CSS2.1）"></a>选择器（CSS2.1）</h2><ol><li>类选择器<ul><li>.类名称</li></ul></li><li>id选择器<ul><li>#id名称</li><li>命名：只能有字母、数字、下划线、短横构成、且不能以数字开字母区分大小写，但习惯小写字母开头</li></ul></li><li>元素选择器（标签选择器)<ul><li>元素名称</li><li>通常用于标签样式的初始化</li></ul></li><li>说明<ul><li><em><strong>选择器的优先级：内联样式&gt;id选择器&gt;类选择器&gt;元素选择器</strong></em></li></ul></li></ol><h2 id="复合选择器（CSS2-1）"><a href="#复合选择器（CSS2-1）" class="headerlink" title="复合选择器（CSS2.1）"></a>复合选择器（CSS2.1）</h2><ol><li>后代选择器<ul><li>.box .spec 选择.box 内部类名为.spec的标签</li></ul></li><li>交集选择器<ul><li>li.spec 选择既是li标签，名字也叫spec类的标签</li></ul></li><li>并集选择器<ul><li>ul,ol 选择所有ul和ol的标签</li></ul></li><li>题目：请根据样式属性，写出文档结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    div.box li p.spec em&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;spec&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="属性选择器（CSS3）-IE9"><a href="#属性选择器（CSS3）-IE9" class="headerlink" title="属性选择器（CSS3） &gt;&#x3D; IE9"></a>属性选择器（CSS3） &gt;&#x3D; IE9</h2><ol><li>img[alt]<ul><li>选择有alt属性的img标签</li></ul></li><li>img[alt&#x3D;”故宫”]<ul><li>选择alt 属性是故宫的img标签</li></ul></li><li>img[alt^&#x3D;”故宫”]<ul><li>选择alt属性以北京开头的img标签</li></ul></li><li>img[alt$&#x3D;”夜景”]<ul><li>选择alt属性以夜景结尾的img标签</li></ul></li><li>img[alt*&#x3D;”美”]<ul><li>选择alt属性包含美字的img标签</li></ul></li><li>img[alt~&#x3D;”手机拍摄”]<ul><li>选择有alt属性有空格隔开的手机拍摄字样的img标签</li></ul></li><li>img[alt|&#x3D;”参赛作品”]<ul><li>选择有alt属性以“参赛作品-”开头的img标签</li></ul></li></ol><h2 id="元素关系选择器（CSS3）"><a href="#元素关系选择器（CSS3）" class="headerlink" title="元素关系选择器（CSS3）"></a>元素关系选择器（CSS3）</h2><ol><li>子选择器&gt;&#x3D;IE7<ul><li>div&gt;p  div的子标签p</li></ul></li><li>相邻兄弟选择器<ul><li>img+p 图片后面紧跟着的段落将被选中</li></ul></li><li>通用兄弟选择器<ul><li>p~span  <em><strong>p元素之后的所有同层级span元素</strong></em></li></ul></li></ol><h2 id="序号选择器（CSS3）"><a href="#序号选择器（CSS3）" class="headerlink" title="序号选择器（CSS3）"></a>序号选择器（CSS3）</h2><ol><li>:first-child &gt;&#x3D;IE7<ul><li>第一个子元素</li></ul></li><li>:last-child<ul><li>最后一个子元素</li></ul></li><li>:nth-child(3)<ul><li>第三个子元素</li><li>:nth-child(3n+2)  从第二个开始，每三个选一个</li><li>2n+1 等价于 odd ，表示奇数</li><li>2n 等价于 even ，b表示偶数</li></ul></li><li>:nth-of-type(3)<ul><li>第三个某类型的子元素，将选择同种标签指定序号的子元素</li></ul></li><li>:nth-last-child(3)<ul><li>倒数第三个子元素</li></ul></li><li>:nth-last-of-type(3)<ul><li>倒数第三个某类型的子元素</li></ul></li></ol><h2 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h2><ol><li>在做网页项目前，可以将所有的常用字号、文字颜色、行高、外边距、内边距等设置为单独的类<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 例如:</span><br><span class="line">.fs12&#123; font-size:12px &#125;</span><br><span class="line">.color-red &#123; color:red &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><ol><li>伪类是添加到选择器的描述性词语，指定要选择的元素的特殊状态，超级链接有4个特殊状态<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>  没有被访问过的超级链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> 已经被访问过的超级链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> 正被鼠标悬停的超级链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> 正被激活的超级链接（按下按键但是还没有松开按键）</span><br></pre></td></tr></table></figure></li><li>“爱恨准则” LOVE HATE<ul><li>:link -&gt; :visited -&gt; :hover -&gt; :active </li><li><em><strong>a 标签伪类必须按照这个写法，否则伪类不生效</strong></em></li></ul></li></ol><h2 id="伪元素（CSS3）"><a href="#伪元素（CSS3）" class="headerlink" title="伪元素（CSS3）"></a>伪元素（CSS3）</h2><ol><li>::before<ul><li>在元素之前创建</li></ul></li><li>::after<ul><li>在元素之后创建</li></ul></li><li>::selection<ul><li>用于文档中被用户高亮的部分（使用鼠标圈选的部分）</li></ul></li><li>::first-letter <ul><li>选中某元素中（必须是块级元素）第一行的第一个字母</li></ul></li><li>::first-line<ul><li>选中某元素中（必须是块级元素）第一行的全部文字</li></ul></li></ol><h2 id="层叠性和选择器权重计算"><a href="#层叠性和选择器权重计算" class="headerlink" title="*层叠性和选择器权重计算"></a>*<em><strong>层叠性和选择器权重计算</strong></em></h2><ol><li><em><strong>选择器的优先级：内联样式&gt;id选择器&gt;类选择器&gt;元素选择器</strong></em></li><li><em><strong>复杂选择器可以通过（id的个数，class的个数，标签的个数）的形式，计算权重</strong></em><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> #box1 #box2 p &#123;</span><br><span class="line">     color: red;</span><br><span class="line"> &#125;</span><br><span class="line"> #box1 div.box2 #box3 p &#123;</span><br><span class="line">     color: green;</span><br><span class="line"> &#125;</span><br><span class="line"> .box1 .box2 .box3 p &#123;</span><br><span class="line">     color: blue;</span><br><span class="line"> &#125;</span><br><span class="line"> 2,0,1</span><br><span class="line"> 2,1,2</span><br><span class="line"> 0,3,1</span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- id选择器个数，类选择器个数，元素选择器个数 --&gt;</span></span><br></pre></td></tr></table></figure></li><li>!important 权重提升   <ul><li>很多公司不允许使用 important ，因为这会带来不经意的样式冲突</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;释义&quot;&gt;&lt;a href=&quot;#释义&quot; class=&quot;headerlink&quot; title=&quot;释义&quot;&gt;&lt;/a&gt;释义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（caseading style sheet、层叠式样式表）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前端三层&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>CSS3浮动定位与背景样式</title>
    <link href="https://zhihuzeye.github.io/2024/06/04/CSS3%E6%B5%AE%E5%8A%A8%E5%AE%9A%E4%BD%8D%E4%B8%8E%E8%83%8C%E6%99%AF%E6%A0%B7%E5%BC%8F/"/>
    <id>https://zhihuzeye.github.io/2024/06/04/CSS3%E6%B5%AE%E5%8A%A8%E5%AE%9A%E4%BD%8D%E4%B8%8E%E8%83%8C%E6%99%AF%E6%A0%B7%E5%BC%8F/</id>
    <published>2024-06-04T12:44:32.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ol><li>浮动的基本概念<ul><li><em><strong>垂直显示的浮动，不要设置浮动，只有并排显示的盒子才要设置浮动！</strong></em></li><li>“大盒子带着小盒子跑”，一个大盒子中，又是一个小天地，内部可以继续使用浮动</li><li>超市售卖的塑料袋0.3元一个，div是免费的！不要节约盒子</li><li><strong>本质</strong><ul><li>浮动的最本质的功能：实现并排</li><li>浮动的要点：要浮动，并排的盒子都要设置浮动</li><li>父盒子要有足够的宽度，否则子盒子会掉下去</li><li>浮动的顺序贴靠特性<ul><li><strong>子盒子会按顺序贴靠，如果没有足够的空间，则会寻找再前一个兄弟元素</strong></li></ul></li><li>浮动的元素一定能设置宽高<ul><li>浮动元素不在区分块级元素、行内元素，已经脱离了标准的文档流，一律能够设置宽度和高度，即使它是span标签或者标签等</li></ul></li></ul></li></ul></li><li>使用浮动实现网页布局</li><li>BFC规范和浏览器差异<ul><li>BFC（ Box formatting Context）块级格式化上下文 是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li><li>从一个现象开始说起<ul><li><strong>一个盒子不设置height，当内容的子元素都浮动时，无法撑起自身</strong></li><li>这个盒子没有形成BFC</li><li><em><strong>如何形成BFC</strong></em><ul><li>1、float的值不是none</li><li>2、position的值不是static或者relative</li><li>3、display的值是inline-block、flex或者inline-flex</li><li>4、overflow:hidden<ul><li>溢出隐藏，溢出盒子边框会隐藏</li></ul></li></ul></li><li>BFC的其他作用<ul><li>BFC可以取消盒子的margin塌陷</li><li>BFC可以阻止元素被浮动的元素覆盖</li></ul></li><li>浏览器差异<ul><li>IE6、IE7浏览器使用haslayout机制，和BFC规范略有差异，比如IE浏览器可以使用zoom:1属性，“让壳子拥有layout”</li><li>如果要兼容IE6、IE7网页时，尽量让网页设计的简单。内部有浮动的盒子要设置height属性，规范编程，不要“玩杂技”</li></ul></li></ul></li></ul></li><li>清除浮动<ul><li>clear: both;</li><li>overflow:hidden</li></ul></li></ol><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ol><li>相对定位<ul><li>相对定位：盒子可以相对自己原来的位置进行调整，称为”相对定位“</li><li><strong>position: relative;</strong></li><li>值可以是负数，即往相反的位置移动</li><li>相对定位的元素，会在“老家留坑”，本质上任然是在原来的位置，只不过渲染在新的地方而已，渲染的图形可以比如成“影子”，不会对其他元素产生任何影响</li><li>相对定位的用途：用来微调元素位置。可以当做绝对定位的参考盒子。</li></ul></li><li>绝对定位<ul><li>盒子可以在浏览器中，以坐标进行位置精准描述，拥有自己的绝对位置</li><li><strong>position: absolute;</strong></li><li>left 到左边的距离，right 到右边的距离，top 到上边的距离，bottom到下边的距离</li><li>绝对定位元素脱离标准文档流，将释放自己的位置，对其他元素不会产生任何干扰，而是对它进行压盖</li><li><em><strong>脱离标准文档流的方法：浮动、绝对定位、固定定位</strong></em></li><li>绝对定位的参考盒子：绝对定位的盒子会以自己祖先元素中，离自己最近的拥有定位属性的盒子，当做基准点，这个盒子通常是相对定位的，所以这个性质也叫作 <strong>“子绝父相”</strong></li><li>绝对定位的盒子并不是永远以浏览器作为基点</li><li><strong>绝对定位的盒子垂直居中</strong><ul><li>position:absolute; top:50%; margin-top:-自己高度的一半</li></ul></li><li>堆叠顺序 z-index<ul><li>没有单位，数值大的就能压盖住小的</li></ul></li><li>绝对定位用途：“压盖”、“遮罩”效果，结合JS实现动画效果，“雪碧图”</li></ul></li><li>固定定位<ul><li>position: fixed;</li><li>固定定位只能以页面为参考点，没有“子固父相”这个性质</li><li>固定定位脱离标准文档流</li><li>用途：返回顶部，楼层导航等</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;浮动的基本概念&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;垂直显示的浮动，不要设置浮动，只有并排显示的盒子才要设置浮动！&lt;/str</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>2D和3D的转换</title>
    <link href="https://zhihuzeye.github.io/2024/06/04/2D%E5%92%8C3D%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://zhihuzeye.github.io/2024/06/04/2D%E5%92%8C3D%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2024-06-04T12:37:48.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3D变形"><a href="#3D变形" class="headerlink" title="3D变形"></a>3D变形</h2><ol><li>3D旋转<ul><li>将transform的属性设置为rotateX()或者rotateY()，即可实现绕横轴、纵轴旋转</li></ul></li><li>空间移动<ul><li>当元素进行3D旋转后，即可继续添加translateX()、translateY()、translateZ()属性让元素在空间进行移动</li></ul></li><li>perspective（景深）<ul><li>该属性用来定义透视强度，可以理解为“人眼到舞台的距离”，单位是px<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- div 是舞台，必须设置perperctive属性，p是演员，设置transform属性 --&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>transform-style（指定嵌套元素是怎样在三维空间中呈现。）<ul><li>preserve-3d 表示所有子元素在3D空间中呈现。</li><li>flat 表示所有子元素在2D平面呈现。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 设置变形类型，保留它内部的3D效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这个盒子又是舞台，又是演员，这个box整体带着里面的p旋转 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>:all <span class="number">10s</span> ease <span class="number">0s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">section</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">219</span>, <span class="number">56</span>, <span class="number">211</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 前面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">42</span>, <span class="number">128</span>, <span class="number">199</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 顶面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">56</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 背面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">213</span>, <span class="number">216</span>, <span class="number">32</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 底面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">236</span>, <span class="number">82</span>, <span class="number">102</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">119</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="2D变形"><a href="#2D变形" class="headerlink" title="2D变形"></a>2D变形</h2><ol><li>旋转变形<ul><li>transform: rotate(45deg);</li><li>若角度为正，就是顺时针，否则就是逆时针</li><li>transform-origin 属性设置自己的自定义变换原点<ul><li>transform-origin: 50px 40px;</li></ul></li></ul></li><li>缩放变形<ul><li>transform: scale(3);</li><li>以中心点为原点缩放</li></ul></li><li>斜切变形<ul><li>transform: skew(10deg,20deg); 即可实现斜切变形</li><li>x的斜切角度，y的斜切角度</li></ul></li><li>位移变形IE9<ul><li>将 transform 属性设置为 translate ，即可实现位移变形<ul><li>transform: translate(200px,400px);</li></ul></li><li>和相对定位非常像，位移变形也会“老家留坑”，形影分离。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3D变形&quot;&gt;&lt;a href=&quot;#3D变形&quot; class=&quot;headerlink&quot; title=&quot;3D变形&quot;&gt;&lt;/a&gt;3D变形&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;3D旋转&lt;ul&gt;
&lt;li&gt;将transform的属性设置为rotateX()或者rotateY()，即可实现绕横</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HTML" scheme="https://zhihuzeye.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常</title>
    <link href="https://zhihuzeye.github.io/2024/06/03/Java-%E5%BC%82%E5%B8%B8/"/>
    <id>https://zhihuzeye.github.io/2024/06/03/Java-%E5%BC%82%E5%B8%B8/</id>
    <published>2024-06-03T14:31:55.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><ol><li>异常本质上是程序上的错误。</li><li>错误在我们编写程序的过程中会经常发生，包括编译期间和运行期间的错误。</li><li>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</li></ol><h2 id="Throwable（异常的根类）"><a href="#Throwable（异常的根类）" class="headerlink" title="Throwable（异常的根类）"></a>Throwable（异常的根类）</h2><ol><li>Error（Java 虚拟机出现问题）<ul><li>Error 是程序无法处理的错误，表示运行应用程序中比较严重的问题。</li><li>它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li><li>对于设计的合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。</li><li>常见错误<ul><li>虚拟机错误 VirtualMachineError</li><li>内存溢出 OutOfMemoryError</li><li>线程死锁 ThreadDeath</li></ul></li></ul></li><li>Exception<ul><li>Exception 是程序本身可以处理的异常。异常处理通常指针对这种类型异常的处理。</li><li>检查异常 Checked Exception<ul><li>编译器要求必须处置的异常。（编码阶段）</li><li>除了 RuntimeException 及相关子类，其它异常都属于 Checked Exception<ul><li>IO 异常 IOException</li><li>SQL 异常 SQLException</li><li>等等</li></ul></li></ul></li><li>非检查异常 Unchecked Exception<ul><li>编译器不要求强制处置的异常（运行阶段）</li><li>包含 RuntimeException 及相关子类<ul><li>空指针异常 NullPointerException</li><li>数组下标越界异常 ArrayIndexOutOfBoundsException</li><li>算数异常 ArithmeticException</li><li>类型转换异常 ClassCastException</li><li>等等…</li></ul></li></ul></li><li>System.exit(1); 终止程序运行</li></ul></li></ol><h2 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw &amp; throws"></a>throw &amp; throws</h2><ol><li>throws<ul><li>可以通过 throws 声明将要抛出何种类型的异常，通过 throw 将产生的异常抛出。</li><li>如果一个方法可能出现异常，但没有能力处理这种异常，可以在方法声明处用 throws 子句来声明抛出异常。</li><li>throws 语句用在方法定义时声明该方法要抛出的异常类型。</li><li>当方法抛出异常列表中的异常时，方法将不对这些类型及其子类类型的异常做处理，而抛向调用该方法的方法，由他去处理。</li></ul></li><li>throw<ul><li>throw 用来抛出一个异常。<ul><li>例如：throw new IOException():</li></ul></li><li>thorw 抛出的只能够是可抛出类 Throwable 或者其子类的实例对象。<ul><li>例如：throw new String(“出错了”); 是错误的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="comment">// 代码段1</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> 异常类型();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(异常类型 ex)&#123;</span><br><span class="line">      <span class="comment">// 对异常处理的代码段2</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>  <span class="keyword">throws</span> 异常类型&#123;</span><br><span class="line">   <span class="comment">// 代码段1</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> 异常类型();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>作用<ul><li><em><strong>规避可能出现的风险</strong></em></li><li><em><strong>完成一些程序的逻辑</strong></em></li></ul></li><li>throw 抛出异常对象的处理方案<ul><li>通过 try…catch 包含 throw 语句 —— 自己抛出自己处理</li><li>通过 throws 在方法声明抛出异常类型 —— 谁调用谁处理 —— 调用者可以自己处理，也可以继续上抛。此时可以抛出与 throw 对象相同类型或者其父类</li><li><strong>当子类重写父类抛出异常方法时，声明的异常必须是父类方法所声明异常的同类或子类。</strong></li></ul></li></ul></li></ol><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li>基本概念<ul><li>使用 Java 内置的异常类可以描述在编程时出现的大部分异常情况。</li><li>也可以通过自定义异常描述特定业务产生的异常类型。</li><li>所谓自定义异常，就是定义一个类，去继承 Throwable 类或者它的子类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">TestException</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="built_in">super</span>(<span class="string">&quot;向父类抛的异常消息&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throw</span> TestException&#123;</span><br><span class="line">       &lt;代码块&gt;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TestException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><ol><li>基本概念<ul><li>有时候我们会捕获一个异常后在抛出另一个异常</li><li>顾名思义就是：将异常发生的原因一个传一个串起来，即把底层的异常信息传个上层，这样逐层抛出。</li></ul></li><li>Exception e1 &#x3D; new Exception(“异常消息”); e1.initCause(e);</li></ol><h2 id="如何处理异常"><a href="#如何处理异常" class="headerlink" title="如何处理异常"></a>如何处理异常</h2><ol><li>在 Java 应用程序中，异常处理机制为<ul><li>抛出异常（先抛出，才能被捕获）</li><li>捕获异常</li></ul></li><li>对于运行时异常，错误或可检查异常，Java 技术所要求的异常处理方式有所不同。<ul><li>1、对于可查异常必须捕捉、或者声明抛出</li><li>2、允许忽略不可查的 RuntimeException（含子类）和 Error（含子类）</li></ul></li><li>通过 5 个关键字来实现<ul><li>捕获异常<ul><li>try（执行可能产生异常的代码）</li><li>catch（捕获异常）</li><li>finally（无论是否发生异常 代码总能执行）</li></ul></li><li>声明异常<ul><li>throws（声明可能要抛出的异常）</li></ul></li><li>抛出异常<ul><li>throw （手动抛出异常）</li></ul></li></ul></li><li>规则说明<ul><li>try-catch-finally <ul><li>try 块后可接零个或多个catch块，如果没有 catch 块，则必须跟一个finally块。</li></ul></li></ul></li><li>自定义异常</li><li>异常链</li></ol><h2 id="实际应用总结"><a href="#实际应用总结" class="headerlink" title="实际应用总结"></a>实际应用总结</h2><ol><li>处理运行异常时，采用逻辑去合理规避同时辅助 try-catch 处理</li><li>在多重 catch 块后面，可以加一个 catch（Exception） 来处理可能被遗漏的异常</li><li>对于不确定的代码，也可以加上 try-catch，处理潜在的异常</li><li>尽量去处理异常，切忌知识简单的调用 printStackTrace() 去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加 finally 语句块去释放占用的资源（关闭文件、关闭 sql 链接）等</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是异常&quot;&gt;&lt;a href=&quot;#什么是异常&quot; class=&quot;headerlink&quot; title=&quot;什么是异常&quot;&gt;&lt;/a&gt;什么是异常&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;异常本质上是程序上的错误。&lt;/li&gt;
&lt;li&gt;错误在我们编写程序的过程中会经常发生，包括编译期间和运行期</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://zhihuzeye.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 面向对象3</title>
    <link href="https://zhihuzeye.github.io/2024/06/03/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/"/>
    <id>https://zhihuzeye.github.io/2024/06/03/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/</id>
    <published>2024-06-03T14:15:42.000Z</published>
    <updated>2024-06-14T11:55:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol><li>基本概念<ul><li>同一种行为，在不同的对象上，会产生不同的显示结果。</li><li>允许不同类的对象对同一消息做出不同的响应</li><li><strong>编译时多态</strong><ul><li>设计时多态 方法重载</li></ul></li><li><em><strong>运行时多态（通常说的这个）</strong></em><ul><li>程序运行时动态决定调用哪个方法</li></ul></li><li>必要条件<ul><li>满足继承关系</li><li>父类引用指向子类对象</li></ul></li></ul></li><li>使用<ul><li>父类引用子类实例 <ul><li>向上转型、隐式转型、自动转型</li><li>父类引用指向子类实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有方法。</li><li>小类转型大类</li><li>父类 static 方法，不允许子类重写</li><li>向上转型后，只能调用到父类原有的静态方法</li></ul></li><li>子类引用指向父类实例<ul><li>向下转型、强制类型转换</li><li>子类引用指向父类对象，此时必须进行强转，可以调用子类独有方法</li><li>必须满足转换条件才能进行强转<ul><li><em><strong>对象 instanceof 类</strong></em></li><li>判断对象是否是类的实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span>  <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">temp</span> <span class="operator">=</span> (Cat)one</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li>抽象类（abstract）<ul><li><strong>Java 中使用抽象类，限制实例化</strong><ul><li>通过 abstract 修饰的类，就是抽象类</li><li>不允许实例化，可以通过向上转型，指向子类实例</li></ul></li><li>通过abstract 修饰的方法，就是抽象方法<ul><li>public abstract void eat(); </li><li><em><strong>子类必须实现这个方法！</strong></em></li></ul></li><li>应用场景<ul><li>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。</li><li><em><strong>避免设计随意性，无意义父类实例化</strong></em></li></ul></li><li>使用规则<ul><li>1、abstract 定义抽象类</li><li>2、抽象类不能直接实例化，只能被继承，可以通过向上转型完成对象实例</li><li>3、abstract 定义抽象方法，不需要具体实现</li><li>4、包含抽象方法的类是抽象类</li><li>5、抽象类中可以没有抽象方法</li><li>6、static final  private 不能与 abstract 并存</li></ul></li></ul></li><li>接口（interface）<ul><li>基本概念<ul><li>接口定义了某一批类所需要遵守的规范</li><li>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它只规定这些类里必须提供某些方法</li></ul></li><li>语法：<ul><li>[修饰符] interface 接口名 [extends 付接口1, 父接口2…]<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   零个到多个常量定义...</span><br><span class="line">   零个到多个抽象方法定义...</span><br><span class="line">   零个到多个默认方法的定义.... (jdk1<span class="number">.8</span>新增)</span><br><span class="line">   零个到多个静态方法的定义... (jdk <span class="number">1.8</span>新增)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用注意：<ul><li>一个类可以实现多个接口，通过逗号分割。 implements</li><li>接口的实现要放在继承后面，一个类只能继承唯一父类，但可以实现若干个接口。实现接口的时候要去重写接口待重写的方法。否则通过 abstract 定义抽象类</li><li>接口也可以实现继承关系，并且可以继承多个父接口，用逗号分开</li><li>如果继承多个接口有多个重名的方法，子类不知道该实现哪个接口的方法，可以重写重名的方法。<ul><li>如果继承父类的同时，也继承方法。它们都有同名的方法，默认继承父类方法。</li></ul></li></ul></li><li>代码示例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.zzz.tel;</span><br><span class="line">   <span class="comment">// 接口访问修饰符：public 默认</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">INet</span> &#123;</span><br><span class="line"> <span class="comment">/*接口中抽象方法可以不写abstract关键字</span></span><br><span class="line"><span class="comment">   /*访问修饰符默认public</span></span><br><span class="line"><span class="comment">    * 当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">network</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口中可以包含常量，默认public static final</span></span><br><span class="line"><span class="type">int</span> TEMP=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//default：默认方法 可以带方法体 jdk1.8后新增</span></span><br><span class="line"><span class="comment">//可以在实现类中重写，并可以通过接口的引用调用</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">connection</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是接口中的默认链接&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static:静态方法 可以带方法体 jdk1.8后新增</span></span><br><span class="line"><span class="comment">//不可以在实现类中重写，可以同接口名调用</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是接口中的静态方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>内部类<ul><li>在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。</li><li>与之对应，包含内部类的类被称为外部类</li><li>内部类隐藏在外部类之内，更好的实现了信息的隐藏。不允许其它类随意的访问。</li><li>内部类分类<ul><li>1、成员内部类<ul><li>内部类中最常见的就是成员内部类，也称普通内部类</li><li>1、内部类在外部使用时，无法直接实例化，需要借由外部类的信息才能完成实例化</li><li>2、内部类的访问修饰符，可以任意，但是访问范围会受到影响</li><li>3、内部类可以直接访问外部类的成员，如果出现同名属性，优先访问内部类中定义的</li><li>4、可以使用 外部类.this.成员 的方式，访问外部类中同名的信息</li><li>5、外部类访问内部类信息，需要通过内部类实例，无法直接访问</li><li>6、内部类编译后 .class 文件命名：外部类$内部类.class</li><li>内部类的获取方式<ul><li>1、new 外部类.new 内部类</li><li>2、外部类对象.new 内部类</li><li>3、外部类对象.获取方法</li></ul></li></ul></li><li>2、静态内部类<ul><li>【成员共享】静态内部类对象可以不依赖于外部类对象，直接创建</li><li>1、静态内部类中，只能直接访问外部类的静态成员，如果需要调用非静态成员，可以通过对象实例</li><li>2、静态内部类对象实例时，可以不依赖于外部类对象</li><li>3、可以通过  外部类.内部类.静态成员  的方式，访问内部类中的静态成员</li><li>4、当内部类属性与外部类属性同名时，默认直接调用内部类中的成员；如果需要访问外部类中的静态属性，则可以通过 外部类.属性 的方式；如果需要访问外部类中的非静态属性，则可以通过 new 外部类().属性 的方式；</li></ul></li><li>3、方法内部类<ul><li>定义在外部类方法中的内部类，也称局部类。</li><li>1、定义在方法内，作用范围也在方法内</li><li>2、和方法内部成员使用规则一样，class 前面不可以添加 public、private、protected、static</li><li>3、类中不能包含静态成员</li><li>4、类中可以包含 final、abstract 修饰的成员</li></ul></li><li>4、匿名内部类<ul><li>将类的定义与类的创建，放到一起完成</li><li>1、匿名内部类没有类型名称、实例对象名称</li><li>2、编译后的文件命名：外部类$数字.class</li><li>3、无法使用 private、public、protected、abstract、static 修饰</li><li>4、无法编写构造方法，可以添加代码块</li><li>5、不能出现静态成员</li><li>6、匿名内部类可以实现接口也可以继承父类，但是不可兼得</li><li>适用场景<ul><li>1、只有到类的一个实例</li><li>2、类在定义后马上用到</li><li>3、给类命名并不会导致代码更容易被理解</li></ul></li></ul></li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;基本概念&lt;ul&gt;
&lt;li&gt;同一种行为，在不同的对象上，会产生不同的显示结果。&lt;/li&gt;
&lt;li&gt;允许不同类的对象对同一消息做出不</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://zhihuzeye.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://zhihuzeye.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
