<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5月最后一天，我开源了一个数据可视化大屏项目</title>
    <url>/2024/05/31/5%E6%9C%88%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%EF%BC%8C%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%B0/</url>
    <content><![CDATA[<p>设计原型：<br><img src="/images/design.png" alt="大屏设计"><br>项目成果：<br><img src="/images/20240531110200.png" alt="项目成果"></p>
<p><strong>以上大屏数据为模拟数据</strong></p>
<p>脚手架命令：pnpm create vite my-react-app –template react-ts</p>
<h2 id="一、项目描述"><a href="#一、项目描述" class="headerlink" title="一、项目描述"></a>一、项目描述</h2><ul>
<li><p>一个基于 React、TypeScript、Vite、Redux、DataV、ECharts 框架的 “ <strong>数据大屏项目</strong> “。支持数据动态刷新渲染、屏幕适配、数据请求模拟、局部样式、图表自由替换&#x2F;复用等功能。</p>
</li>
<li><p>项目全屏展示点击右上角全屏按钮或（按 F11）。</p>
</li>
<li><p>项目环境：<a href="mailto:&#x72;&#101;&#x61;&#99;&#116;&#64;&#x31;&#x38;&#46;&#50;&#x2e;&#48;">&#x72;&#101;&#x61;&#99;&#116;&#64;&#x31;&#x38;&#46;&#50;&#x2e;&#48;</a>、<a href="mailto:&#x74;&#x79;&#x70;&#x65;&#x73;&#99;&#114;&#x69;&#x70;&#x74;&#x40;&#53;&#46;&#x32;&#46;&#50;">&#x74;&#x79;&#x70;&#x65;&#x73;&#99;&#114;&#x69;&#x70;&#x74;&#x40;&#53;&#46;&#x32;&#46;&#50;</a>、<a href="mailto:&#x76;&#105;&#x74;&#101;&#x40;&#x35;&#46;&#50;&#46;&#x30;">&#x76;&#105;&#x74;&#101;&#x40;&#x35;&#46;&#50;&#46;&#x30;</a>、<a href="mailto:&#x65;&#x63;&#104;&#x61;&#x72;&#116;&#115;&#64;&#x35;&#46;&#53;&#x2e;&#x30;">&#x65;&#x63;&#104;&#x61;&#x72;&#116;&#115;&#64;&#x35;&#46;&#53;&#x2e;&#x30;</a>、<a href="mailto:&#112;&#110;&#x70;&#109;&#x40;&#55;&#x2e;&#50;&#55;&#x2e;&#x30;">&#112;&#110;&#x70;&#109;&#x40;&#55;&#x2e;&#50;&#55;&#x2e;&#x30;</a>、<a href="mailto:&#x6e;&#111;&#x64;&#x65;&#64;&#x76;&#49;&#54;&#46;&#49;&#x38;&#x2e;&#x31;">&#x6e;&#111;&#x64;&#x65;&#64;&#x76;&#49;&#54;&#46;&#49;&#x38;&#x2e;&#x31;</a>。</p>
</li>
</ul>
<p>友情链接：</p>
<ol>
<li><a href="https://react.docschina.org/docs/introducing-jsx.html">React 官方文档</a></li>
<li><a href="https://geohub.amap.com/mapstyle/index">高德 自定义地图</a></li>
<li><a href="http://mockjs.com/">Mockjs 官方文档</a></li>
<li><a href="http://datav-react.jiaminghi.com/guide/">DataV 官方文档</a></li>
<li><a href="https://echarts.apache.org/examples/zh/index.html">echarts 实例</a>，<a href="https://echarts.apache.org/zh/api.html#echarts">echarts API文档</a></li>
</ol>
<h2 id="二、文件目录介绍"><a href="#二、文件目录介绍" class="headerlink" title="二、文件目录介绍"></a>二、文件目录介绍</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Project</span><br><span class="line">├─.eslintrc.cjs ----------- // eslint 配置</span><br><span class="line">├─.gitignore -------------- // git 控制文件</span><br><span class="line">├─custom.d.ts ------------- // 自定义类型声明</span><br><span class="line">├─index.html -------------- // 主页面</span><br><span class="line">├─mock -------------------- // 模拟数据</span><br><span class="line">├─package.json ------------ // 项目信息+依赖包</span><br><span class="line">├─pnpm-lock.yaml ---------- // 锁定依赖包</span><br><span class="line">├─README.md --------------- // 说明文档</span><br><span class="line">├─src </span><br><span class="line">│ ├─App.module.css </span><br><span class="line">│ ├─App.tsx --------------- // App 入口</span><br><span class="line">│ ├─assets ---------------- // 静态资源</span><br><span class="line">│ ├─components </span><br><span class="line">│ │ ├─AutoScale ----------- // 自动缩放 HOC</span><br><span class="line">│ │ ├─index.ts </span><br><span class="line">│ │ └─ScaleContainer ------ // 缩放容器 HOC</span><br><span class="line">│ ├─hooks </span><br><span class="line">│ │ └─useFullscreen.ts ---- // 控制全屏 Hooks</span><br><span class="line">│ ├─index.css </span><br><span class="line">│ ├─main.tsx -------------- // 主入口</span><br><span class="line">│ ├─redux ----------------- // redux 相关</span><br><span class="line">│ ├─services -------------- // 服务端相关配置文件</span><br><span class="line">│ ├─utils ----------------- // 工具函数</span><br><span class="line">│ ├─views ----------------- // 页面</span><br><span class="line">│ └─vite-env.d.ts </span><br><span class="line">├─tsconfig.json ----------- // ts 配置文件</span><br><span class="line">├─tsconfig.node.json ------ // node ts 配置文件</span><br><span class="line">└─vite.config.ts ---------- // vite 配置文件</span><br></pre></td></tr></table></figure>

<h2 id="三、详情介绍"><a href="#三、详情介绍" class="headerlink" title="三、详情介绍"></a>三、详情介绍</h2><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>需要提前安装好 <code>nodejs</code> 与 <code>pnpm</code>，下载项目后在项目主目录下运行 <code>pnpm install</code> 拉取依赖包，使用命令 <code>pnpm dev</code> 启动项目。</p>
<h3 id="数据请求模拟"><a href="#数据请求模拟" class="headerlink" title="数据请求模拟"></a>数据请求模拟</h3><p>项目采用 Mockjs 模拟数据方式，配置在 <code>mock</code> 文件夹中，Mockjs 使用方法请查阅 <a href="http://mockjs.com/">Mockjs文档</a>，主入口文件 main.tsx 引入 mock 文件。</p>
<p>接口 API 请求地址写在 <code>services/api.service.ts</code> 中，由 <code>@reduxjs/toolkit createAsyncThunk</code> 创建异步 Thunk 发起请求。</p>
<p>页面通过 <code>useDispatch</code> 发起请求，<code>useSelector</code> 接收数据。</p>
<h3 id="图表组件"><a href="#图表组件" class="headerlink" title="图表组件"></a>图表组件</h3><p>图表组件主要使用了 ECharts 和 DataV 可视化框架来进行开发。图表配置文件在 <code>views/components/*/options.ts</code> 中，数据由各个组件请求后导入。ECharts 渲染函数统一封装在了 <code>utils/chart.js</code> 中。</p>
<h3 id="样式编写"><a href="#样式编写" class="headerlink" title="样式编写"></a>样式编写</h3><p>样式编写使用了 <code>CSS in JS (JSS)</code> ，使样式具有组件级别的作用域，避免了全局样式污染的问题。<br>使用示例：</p>
<ol>
<li>将 css 文件名修改为 xxx.module.css</li>
<li>导入样式文件 import styles from ‘.&#x2F;xxx.module.css’</li>
<li>使用 styles.className</li>
<li>定义 ts 类型文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// custom.d.ts</span></span><br><span class="line"> declare <span class="variable language_">module</span> <span class="string">&quot;*.css&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">css</span>: &#123; [<span class="attr">key</span>: string]: string &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> css</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>vscode 安装插件：typescript-plugin-css-modules<ul>
<li>作用：解析 css 文件，并生成 ts 对应的类型</li>
<li>使用：在 tsconfig.json 配置 plugins 字段 [{“typescript-plugin-css-modules”}]</li>
<li>在 项目根目录创建 .vscode 文件夹  创建 settings.json 文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// settings.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;typescript.tsdk&quot;</span>: <span class="string">&quot;node_modules/typescript/lib&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript.enablePromptUseWorkspaceTsdk&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h3><p>本项目借助 HOC 高阶组件包裹，将大屏限制在 1920x1080 尺寸。通过动态计算缩放比例，实时控制容器缩放大小，具体代码请参阅。<code>components/AutoScale</code> 和 <code>components/ScaleContainer</code> 组件。</p>
<p>在编写大屏代码时，样式无需转换，按照设计稿 1920x1080 <strong>1:1</strong> 编写即可。</p>
<h2 id="四、全屏控制"><a href="#四、全屏控制" class="headerlink" title="四、全屏控制"></a>四、全屏控制</h2><p>自定义 Hook（高阶组件）useFullscreen，用于控制页面全屏显示的功能，具体代码请参阅 <code>hooks/useFullscreen</code> 自定义钩子。</p>
<h2 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h2><p>这个项目是个人的作品，难免会有问题和 BUG。如果您发现任何问题，欢迎提出反馈和建议。我会尽力去更新和修复，并持续学习前端知识。非常感谢您的支持和理解！我很乐意与您交流，共同进步。</p>
<p><strong>GitHub 地址</strong><br><a href="https://github.com/zhihuzeye/react-screen-demo.git">GitHub 地址</a>：<a href="https://github.com/zhihuzeye/react-screen-demo.git">https://github.com/zhihuzeye/react-screen-demo.git</a></p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>数据可视化大屏</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常量与变量</title>
    <url>/2024/05/31/Java-%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol>
<li>如 类 的名字</li>
<li>标识符命名规则<ul>
<li>可以由 字母、数字、下划线 ( _ ) 和美元 ( $ ) 符组成，不能以数字开头</li>
<li>标识符严格区分大小写</li>
<li>不能是Java的关键字和保留字</li>
<li>标志符的命名最好能反映出作用</li>
</ul>
</li>
</ol>
<span id="more"></span>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table>
<thead>
<tr>
<th>关键字</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>abstract</td>
<td>boolean</td>
<td>break</td>
<td>byte</td>
<td>case</td>
<td>catch</td>
</tr>
<tr>
<td>char</td>
<td>class</td>
<td>continue</td>
<td>default</td>
<td>do</td>
<td>double</td>
</tr>
<tr>
<td>else</td>
<td>extends</td>
<td>false</td>
<td>final</td>
<td>finally</td>
<td>float</td>
</tr>
<tr>
<td>for</td>
<td>if</td>
<td>implements</td>
<td>import</td>
<td>native</td>
<td>int</td>
</tr>
<tr>
<td>interface</td>
<td>long</td>
<td>instanceof</td>
<td>new</td>
<td>null</td>
<td>package</td>
</tr>
<tr>
<td>private</td>
<td>protected</td>
<td>public</td>
<td>return</td>
<td>short</td>
<td>static</td>
</tr>
<tr>
<td>super</td>
<td>switch</td>
<td>synchronized</td>
<td>this</td>
<td>throw</td>
<td>throws</td>
</tr>
<tr>
<td>transient</td>
<td>true</td>
<td>try</td>
<td>void</td>
<td>volatile</td>
<td>while</td>
</tr>
</tbody></table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol>
<li>什么是变量 <ul>
<li>程序中数据的临时存放场所，解决数据存储的问题，存储到内存中</li>
<li><strong>变量的三个元素：变量类型、变量名和变量值</strong></li>
<li>格式：数据类型 变量名;<ul>
<li>例子：int n; 声明整型 n</li>
<li>使用 “&#x3D; ” 运算符进行赋值</li>
</ul>
</li>
<li>可以在定义变量的同时给变量赋值，即变量的初始化。</li>
</ul>
</li>
<li>变量的命名规则<ul>
<li>满足标识符的命名规则</li>
<li>符合驼峰法命名规范</li>
<li>尽量简单、做到见名知意</li>
<li>变量名的长度没有限制</li>
</ul>
</li>
<li>类的命名规则<ul>
<li>满足 Pascal 命名法规范</li>
<li>组成类名的 首字母 总是大写</li>
</ul>
</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1个字节等于8位，类定义的变量又叫对象</p>
<ol>
<li><p>基本数据类型</p>
<ul>
<li>数值型<ol>
<li>整数类型（byte、short、int、long）<ul>
<li>字节型 1 <ul>
<li>表示范围：-128 - 127</li>
<li>占用内存 1 字节（8 bits）</li>
</ul>
</li>
<li>短整型 2<ul>
<li>表示范围：-32768 - 32767</li>
<li>占用内存 2 字节</li>
</ul>
</li>
<li>整型 4<ul>
<li>表示范围：-2,147,483,648 - 2,147,483,647</li>
<li>占用内存 4 字节</li>
</ul>
</li>
<li>长整型 8 <ul>
<li><strong>Java 中的整数类型默认为 int。如果需要使用 long 类型,需要在数值后加 L 或 l 来声明</strong> </li>
<li>最小值：-9,223,372,036,854,775,808  ~ 最大值：9,223,372,036,854,775,807）</li>
<li>占用内存: 8 字节 (64 bits)</li>
</ul>
</li>
<li>整型字面值<ul>
<li>Java 有三种表示整数的方法：十进制、八进制、十六进制</li>
<li>八进制：以 0 开头，包含 0 - 7 的数字，如：037</li>
<li>十进制：0-9，包含0 和 9</li>
<li>十六进制表示：以 0x 或 0X 开头，包括 0-9 的数字，及字母 a-f 、A-F , a表示数字10，以此类推。如：0x12，0xabcf</li>
<li>0x1abcL 长整型的表示方式，后缀 L，大小写均可</li>
</ul>
</li>
</ul>
</li>
<li>浮点类型（float、double）<ul>
<li>单精度浮点型 4</li>
<li>双精度浮点型 8 <ul>
<li>表示的范围是最大的</li>
</ul>
</li>
<li>浮点型字面值<ul>
<li>浮点型字面值默认情况下表示double类型，也可以在值后加上 d 或 D</li>
<li>如表示 float 类型，则需要在字面值后加 f 或 F</li>
</ul>
</li>
<li>用科学计数法表示浮点型数据  double d &#x3D; 1.23E5</li>
</ul>
</li>
</ol>
</li>
<li>字符型（char）2<ul>
<li>字符型字面值<ul>
<li>字符型字面值用单引号内的单个字符表示。</li>
<li>如何定义字符型变量？ char a &#x3D; ‘a’;</li>
<li>char 表示范围 0 -65535<ul>
<li>最小值: 0 (对应 Unicode 字符 ‘\u0000’)</li>
<li>最大值: 65,535 (对应 Unicode 字符 ‘\uFFFF’)</li>
</ul>
</li>
<li><strong>char 类型只能存储单个字符,如果尝试存储多个字符会报错！</strong></li>
</ul>
</li>
</ul>
</li>
<li>布尔型（boolean） 1<ul>
<li>布尔值字面值<ul>
<li>布尔值只能定义 true 或 false</li>
<li>例如：boolean b &#x3D; true;</li>
</ul>
</li>
</ul>
</li>
<li>字符串字面值<ul>
<li><strong>字符串不属于基本数据类型，它是类！</strong> </li>
<li>双引号引起来的0个或多个字符</li>
<li>例如 String s &#x3D; “”;</li>
</ul>
</li>
</ul>
</li>
<li><p>引用数据类型</p>
<ul>
<li>类（class）</li>
<li>接口（interface）</li>
<li>数组（Array）</li>
<li>枚举（Enum）</li>
<li>字符串（String）</li>
</ul>
</li>
<li><p>按照作用范围分为</p>
<ul>
<li>类级</li>
<li>对象实例级</li>
<li>方法级 局部变量</li>
<li>块级</li>
</ul>
</li>
</ol>
<h2 id="信息编码"><a href="#信息编码" class="headerlink" title="信息编码"></a>信息编码</h2><ol>
<li>ASCll 码<ul>
<li>美国标准信息交换代码</li>
<li>基于拉丁字母的一套电脑编码系统</li>
<li>主要用于显示现代英语和其他西欧语言（没有中文）</li>
<li>使用7位或8位二进制数组合来表示128位或256种可能的字符<ul>
<li>7位二进制组合——标准ASCll 码 （表示 大小写字母、标点符号、美式英语中的控制字符等）</li>
<li>8位 二进制数组合（后128位）—— 扩展ASCll 码（扩展ASCll 码表示特殊符号，外来语言的字母等）</li>
</ul>
</li>
</ul>
</li>
<li>Unicode 编码<ul>
<li>统一码、万国码</li>
<li>目标是支持世界上所有的字符集</li>
<li>char c &#x3D; ‘\u005d’</li>
<li>Unicode 表示法，在值的前面加前缀 \u</li>
</ul>
</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol>
<li>类型转换分为自动类型转换和强制类型转换</li>
<li>自动类型转换（隐式类型转换）<ul>
<li>转换顺序</li>
</ul>
</li>
<li>强制类型转换<ul>
<li>强制类型转换，可能引起数据丢失</li>
<li>如果 A 类型数据表示的范围比 B 类型大，则将 A 类型的值赋值给 B 类型，需要强制类型转换 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span>  <span class="operator">=</span> <span class="number">123.4</span>;<span class="type">float</span> <span class="variable">f</span>  <span class="operator">=</span> (<span class="type">float</span>)d;</span><br></pre></td></tr></table></figure></li>
<li>强制类型转换的格式：（数据类型）数值</li>
</ul>
</li>
</ol>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul>
<li>final int n &#x3D; 5;</li>
<li><strong>用 final 关键字定义常量</strong> </li>
<li>不能变化的值</li>
<li><strong>常量名 一般用 大写字母表示，两个单词及以上，用下划线连接</strong></li>
</ul>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\uxxxx</td>
<td>四位16进制所表示的字符</td>
</tr>
<tr>
<td>&#39;</td>
<td>单引号字符</td>
</tr>
<tr>
<td>&quot;</td>
<td>双引号字符</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠字符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\t</td>
<td>横向跳格</td>
</tr>
<tr>
<td>\b</td>
<td>退格</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境搭建</title>
    <url>/2024/05/31/Java-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li>安装 JDK </li>
<li>安装 Navicat 数据库工具</li>
<li>安装 IntelliJ IDEA 编译器</li>
<li>安装 Redis <a href="https://blog.csdn.net/antma/article/details/79225084">Redis安装（Windows环境下Redis安装）</a> </li>
<li>maven3.6.3 安装 <a href="https://blog.csdn.net/kenkao/article/details/128842266">Windows系统Maven3.6.3下载与安装</a><ul>
<li>apache-maven-3.6.1&#x2F;conf  目录下配置  settingsapplication.xml 文件 <strong>主要用于配置 Maven 的行为和外部依赖</strong></li>
<li>apache-maven-3.6.1 目录下创建 repo 文件夹</li>
</ul>
</li>
<li>安装 IntelliJ IDEA  插件<br><img src="/images/874811934.png" alt="插件"><br><img src="/images/94823832832.png" alt="插件"></li>
<li>项目 .idea 目录下 misc.xml 文件配置 Yapi <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;yapi&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectToken&quot;</span>&gt;</span>your yapiToken<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectId&quot;</span>&gt;</span>789<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;yapiUrl&quot;</span>&gt;</span>your yapiUrl<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectType&quot;</span>&gt;</span>api<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>安装 Xshell </li>
<li>安装 XFTP</li>
</ol>
<p>友情链接：</p>
<ol>
<li><a href="https://plugins.jetbrains.com/plugin/index?xmlId=cn.wuzhizhan.plugin.mybatis">Free MyBatis plugin</a></li>
</ol>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 数组</title>
    <url>/2024/06/02/Java-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><ol>
<li><strong>数组是相同类型的数据按顺序组成的一种引用类型</strong></li>
<li>数据类型</li>
</ol>
<ul>
<li>基本数据类型</li>
<li>引用数据类型<ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
<li>等等</li>
</ul>
</li>
</ul>
<ol start="3">
<li>注意的问题</li>
</ol>
<ul>
<li>数组是引用数据类型</li>
<li>创建数组时，会开辟连续的内存空间</li>
<li>数据长度使用 length 属性获取</li>
<li>数组元素的下标从0开始</li>
<li>数组下标越界问题</li>
</ul>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ol>
<li>声明</li>
</ol>
<ul>
<li>语法格式<ul>
<li><strong>数据类型[] 数组名;</strong></li>
<li><strong>数据类型 数组名[];</strong></li>
</ul>
</li>
<li>变量声明的语法格式<ul>
<li>数据类型 变量名;</li>
</ul>
</li>
</ul>
<ol start="2">
<li>创建<ul>
<li><strong>语法格式一：先声明后创建</strong><ul>
<li>数据类型[] 数组名;</li>
<li>数组名 &#x3D; new 数据类型[数组长度];</li>
<li>int [] arr;arr &#x3D; new int[10]; 创建一个长度为10的整型数组</li>
</ul>
</li>
<li><strong>语法格式二：声明的同时创建数组</strong><ul>
<li>数据类型[] 数组名 &#x3D; new 数据类型[数组长度];</li>
<li>int [] arr &#x3D; new int[10]; 创建长度为10的整型数组 arr</li>
<li>注意：数组长度必须指定</li>
</ul>
</li>
<li><strong>数组在内存中的存储</strong><ul>
<li><strong>数组会被分配连续的内存空间</strong></li>
<li>局部变量和数组的默认值问题<ul>
<li>局部变量没有默认值、数组有默认值（数组的本身是对象）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>初始化<ul>
<li>声明数组的同时给数组赋值，叫做数组的初始化</li>
<li><strong>int[] arr &#x3D; {1,2,3,4,5}; 数组的长度就是初始化时所给数组元素的个数</strong> (花括号)</li>
</ul>
</li>
<li>元素的引用<ul>
<li>语法格式：数组名[下标]</li>
<li>注意：下标从 0 开始</li>
</ul>
</li>
<li>长度<ul>
<li>arr.length 表示数组的长度</li>
</ul>
</li>
</ol>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ul>
<li>二维数组的声明和创建<ul>
<li>声明<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] intArray;</span><br><span class="line"><span class="type">float</span> floatArray[][];</span><br><span class="line"><span class="type">double</span>[] doubleArray[];</span><br></pre></td></tr></table></figure></li>
<li>创建 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>列可以省略，行不能省略 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">floatArray = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span>][]; floatArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>二维数组的初始化  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] num = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
<li>二维数组的引用</li>
<li>多个一维数组组成的内容</li>
</ul>
<h2 id="增强型-for-循环"><a href="#增强型-for-循环" class="headerlink" title="增强型 for 循环"></a>增强型 for 循环</h2><ol>
<li>又叫 foreach 循环</li>
<li>foreach 循环引用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n;arr)</span><br><span class="line">System.out.println(n);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 方法</title>
    <url>/2024/06/02/Java-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h2><p>所谓方法，就是用来解决一类问题的代码的有序组合，是一个功能模块。</p>
<h2 id="方法的声明和调用"><a href="#方法的声明和调用" class="headerlink" title="方法的声明和调用"></a>方法的声明和调用</h2><ol>
<li>方法声明<ul>
<li>语法格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(参数列表)&#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>访问修饰符<ul>
<li>public</li>
<li>privete</li>
<li>protected</li>
<li>默认</li>
</ul>
</li>
<li><strong>方法是在类的内部中定义</strong></li>
</ul>
</li>
<li>方法调用<ul>
<li>语法格式 <ul>
<li>类名 实例名 &#x3D; new 类名(); 实例名.方法名();</li>
<li>对于静态方法 static , 直接调用 方法名();</li>
</ul>
</li>
</ul>
</li>
<li>方法分类<ul>
<li>根据方法是否带参数、是否返回值，可以分为四类：</li>
<li>无参无返回值方法</li>
<li>无参带返回值方法</li>
<li>带参带返回值方法</li>
<li>带参无返回值方法</li>
</ul>
</li>
</ol>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ol>
<li>同一个类中</li>
<li><strong>方法名相同，参数列表不同</strong></li>
<li>方法返回值、访问修饰符任意</li>
<li>与方法参数名无关</li>
</ol>
<h2 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h2><ol>
<li>public void sum(int… n) { &lt;语句块&gt; }<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... n)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i:n) </span><br><span class="line">		sum+=i;</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><em><strong>参数列表中如果有两个以上的参数，可变参数一定是在最后的！</strong></em></li>
<li><em><strong>可以将数组传递给可变参数列表，反之不行</strong></em></li>
<li>数组作为参数时，是不能将多个值传递给数组的！</li>
<li><strong>一个方法中，只能有一个可变参数</strong></li>
<li>可变参数列表所在的方法是最后被访问的。</li>
</ol>
<h2 id="方法的传值问题"><a href="#方法的传值问题" class="headerlink" title="方法的传值问题"></a>方法的传值问题</h2><ol>
<li>基本数据类型传值<ul>
<li>方法中对参数的修改，不会对主方法传来的变量值产生影响</li>
</ul>
</li>
<li>引用数据类型传值<ul>
<li>方法中对数组的改变，会印象主方法中传来的数组</li>
</ul>
</li>
</ol>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><table>
<thead>
<tr>
<th>访问修饰符</th>
<th>本类</th>
<th>同包</th>
<th>子类</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认（不写）</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 运算符</title>
    <url>/2024/05/31/Java-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ol>
<li>表达式由运算符和操作数组成</li>
<li>如：5、num1、num1 + num2</li>
</ol>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol>
<li>算数运算符<ul>
<li>算数运算符主要用于进行基本的算数运算，如加法、减法、乘法和除法等。</li>
<li>加法 +</li>
<li>减法 - </li>
<li>乘法 * </li>
<li>除法 &#x2F;  <strong>在除法运算中，如果除数和被除数都是整数，则做整除运算</strong></li>
<li>求余数 %</li>
<li>自增1 ++</li>
<li>自减1 –</li>
</ul>
</li>
<li>赋值运算符<ul>
<li>格式：变量 &#x3D; 表达式;</li>
<li><strong>注意：赋值运算符是从右往左运算！</strong> </li>
<li><strong>赋值运算符的左边不能是常量，必须是常量</strong></li>
<li>复合赋值运算符<ul>
<li>+&#x3D; 代码示例：x+&#x3D;5 , x &#x3D; x + 5</li>
<li>-&#x3D;</li>
<li>*&#x3D;</li>
<li>&#x2F;&#x3D;</li>
<li>%&#x3D;</li>
</ul>
</li>
</ul>
</li>
<li>关系运算符<ul>
<li>比较运算符用于判断两个数据的大小，如大于</li>
<li>比较的结果是一个 布尔值</li>
<li>大于 &gt;<ul>
<li>‘A’ &gt; ‘’B  结果为 false , 比较的是两个字符的 ASCll 值</li>
</ul>
</li>
<li>小于 &lt;</li>
<li>大于等于 &gt;&#x3D;</li>
<li>小于等于 &lt;&#x3D;</li>
<li>等于 &#x3D;&#x3D;<ul>
<li>float  f &#x3D; 5.0f; long l &#x3D;5; f&#x3D;&#x3D;l;  结果为true，浮点数与整数进行比较，只要值相等就返回true</li>
</ul>
</li>
<li>不等于 !&#x3D;</li>
<li>作用与功能<ul>
<li>数据比较<ul>
<li>关系运算符主要用于条件和循环语句中的判断条件</li>
<li>条件结构就是根据不同的条件去执行不同的操作</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>逻辑运算符是用来连接一个或多个条件，判断这些条件是否成立 </li>
<li>逻辑运算符的结果是布尔类型</li>
<li>与<ul>
<li>&amp;&amp; 或 &amp;<ul>
<li>&amp;&amp; 运算符又叫短路运算符，如果第一个表达式的值就能决定表达式最后的结果，运算符右边的表达式就不再运算了</li>
<li>&amp; 不论第一个表达式 true 还是 false，都要执行右边的表达式</li>
</ul>
</li>
<li>operator1 &amp;&amp; operator2</li>
</ul>
</li>
<li>或<ul>
<li>|| 或 |<ul>
<li>|| 和  &amp;&amp; 运算符一样</li>
<li>| 和 &amp; 一样</li>
</ul>
</li>
<li>operator1 || operator2</li>
</ul>
</li>
<li>非<ul>
<li>!<ul>
<li>对原条件进行取反</li>
</ul>
</li>
<li>!operator1</li>
</ul>
</li>
<li>注意：<strong>逻辑运算符的操作数都是布尔类型的</strong></li>
</ul>
</li>
<li>条件运算符<ul>
<li>三元运算符 ? :</li>
</ul>
</li>
<li>Java 中的条件运算符是三目运算符<ul>
<li>++ 单目运算符</li>
<li>双目运算符，需要对两个数进行操作 + - * &#x2F; </li>
<li><strong>语法：布尔表达式 ? 表达式1 : 表达式2</strong></li>
<li>当布尔表达式的值为 true , 则返回表达式 1 的值，否则 返回表达式 2 的值</li>
</ul>
</li>
<li>位运算符<ul>
<li>按位与（&amp;）：逐位进行与操作，只有当对应位都为 1 时，结果位才为 1。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 二进制为 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &amp; b; <span class="comment">// 结果为 1 (二进制为 0001)</span></span><br></pre></td></tr></table></figure></li>
<li>按位或（|）：逐位进行或操作，只要有一个对应位为 1，结果位就为 1。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 二进制为 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a | b; <span class="comment">// 结果为 7 (二进制为 0111)</span></span><br></pre></td></tr></table></figure></li>
<li>按位异或（^）：逐位进行异或操作，当对应位不同时，结果位为 1。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 二进制为 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a ^ b; <span class="comment">// 结果为 6 (二进制为 0110)</span></span><br></pre></td></tr></table></figure></li>
<li>按位取反（~）：逐位进行取反操作，0 变 1，1 变 0。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ~a; <span class="comment">// 结果为 -6 (二进制为 1010)</span></span><br></pre></td></tr></table></figure></li>
<li>左移（&lt;&lt;）：将二进制位向左移动指定的位数，相当于乘以 2 的指定次方。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &lt;&lt; <span class="number">1</span>; <span class="comment">// 结果为 10 (二进制为 1010)</span></span><br></pre></td></tr></table></figure></li>
<li>右移（&gt;&gt;）：将二进制位向右移动指定的位数，相当于除以 2 的指定次方。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &gt;&gt; <span class="number">1</span>; <span class="comment">// 结果为 2 (二进制为 0010)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>运算符优先级<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>权重</th>
</tr>
</thead>
<tbody><tr>
<td>()</td>
<td>圆括号</td>
<td>0</td>
</tr>
<tr>
<td>!，++，–</td>
<td>逻辑非，自增，自减</td>
<td>1</td>
</tr>
<tr>
<td>*，&#x2F;，%</td>
<td>乘法，除法，取余</td>
<td>2</td>
</tr>
<tr>
<td>+，-</td>
<td>加法，减法</td>
<td>3</td>
</tr>
<tr>
<td>&lt;，&lt;&#x3D;，&gt;，&gt;&#x3D;</td>
<td>小于，小于等于，大于，大于等于</td>
<td>4</td>
</tr>
<tr>
<td>&#x3D;&#x3D;，!&#x3D;</td>
<td>等于，不等于</td>
<td>5</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>6</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
<td>7</td>
</tr>
<tr>
<td>&#x3D;，+&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;，-&#x3D;</td>
<td>赋值运算符，复合赋值运算符</td>
<td>8</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 选择结构</title>
    <url>/2024/06/02/Java-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ol>
<li>三大流程控制语句：顺序、选择、循环<ul>
<li>顺序结构，从上往下依次执行</li>
<li>选择结构，根据条件执行对应的内容</li>
<li>循环结构，循环执行，反复执行</li>
</ul>
</li>
</ol>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ol>
<li>if 结构 ，if - else 结构</li>
<li>多重 if </li>
<li>嵌套 if </li>
<li>switch 结构</li>
<li>if 和 switch 的区别<ul>
<li>if 结构<ul>
<li>判断条件是布尔类型</li>
<li>判断条件是一个范围</li>
</ul>
</li>
<li>switch 结构<ul>
<li>判断条件是常量值<br>JDK 7.0 以后表达式的值可以是基本数据类型的，byte，short，int，char，以及 String 类型。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ol>
<li>while<ul>
<li>如果循环体只有一条语句，大括号可以省略</li>
<li>为避免死循环，小括号后面不要加分号</li>
<li>语法格式  while(条件){ &lt;语句&gt; }</li>
</ul>
</li>
<li>do-while<ul>
<li>注意事项<ul>
<li>do-while 循环至少执行一次</li>
<li>循环条件后的分号不能丢</li>
<li>局部变量使用前必须初始化</li>
</ul>
</li>
<li>语法格式  do{ &lt;语句&gt;} while(循环条件);</li>
<li>Math.random() 得到 [0,1) 之间的随机数</li>
</ul>
</li>
<li>for<ul>
<li>语法格式：for(表达式1;表达式2;表达式3){ &lt;语句&gt;}</li>
<li>注意事项：break 语句表示跳出当前循环</li>
</ul>
</li>
<li>循环嵌套</li>
<li>break 语句<ul>
<li>break 语句可以结束当前循环的执行</li>
<li>执行完 break 语句后，循环体中位于 break 语句后面的语句就不会被执行</li>
<li>在多重循环中，break 语句只向外跳一层</li>
<li>注意：<strong>break 跳出当前循环</strong></li>
</ul>
</li>
<li>continue 语句<ul>
<li>continue 语句只能用在循环里</li>
<li>continue 语句可以结束当前循环的执行，但是要继续执行下一次循环的执行</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 面向对象1</title>
    <url>/2024/06/02/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/</url>
    <content><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol>
<li>面向对象<ul>
<li><strong>关注现实存在的事物的各方面信息，从对象的角度出发，根据事物的特征进行程序设计</strong></li>
<li>对象：用来描述客观事物的一个实体</li>
<li>类：具有相同属性和方法的一组对象的集合</li>
</ul>
</li>
<li>属性<ul>
<li>对象具有的各种静态特征</li>
<li>“对象有什么”</li>
</ul>
</li>
<li>方法<ul>
<li>对象具有的各种</li>
<li>“对象能做什么”</li>
<li>在方法中通过对象作为参数，传递的是它的引用，可以通过引用获取该对象的所有信息。</li>
</ul>
</li>
<li>类<ul>
<li>抽象的概念</li>
<li>模板</li>
<li>类是模子，确定对象将会拥有的特征（属性）和行为（方法）</li>
<li>类是对象的类型</li>
<li>构造方法<ul>
<li>注意事项<ul>
<li><em><strong>构造方法与类同名且没有返回值（必须与类名相同）</strong></em><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法的语法格式：</span></span><br><span class="line"><span class="comment">// 没有返回值类型 , 构造方法名 与类名相同 </span></span><br><span class="line"><span class="keyword">public</span> 构造方法名()&#123;</span><br><span class="line">  <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只能在对象实例化的时候调用</li>
</ul>
</li>
<li>特点<ul>
<li><em><strong>当没有指定构造方法时，系统会自动添加无参的构造方法</strong></em></li>
<li><em><strong>当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法</strong></em></li>
<li>一个类中可以有多个构造方法</li>
<li>this();  访问其它无参或带参 构造方法</li>
</ul>
</li>
</ul>
</li>
<li>this 关键字<ul>
<li>this：当前对象的默认引用</li>
<li>this 的使用<ul>
<li>调用成员属性，解决成员属性的局部变量同名冲突</li>
<li>调用成员方法</li>
<li>调用重载的构造方法 this();<ul>
<li><em><strong>通过 this() 调用构造方法，必须放在方法体内的第一行！！！</strong></em></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>对象<ul>
<li>基本概念<ul>
<li>一个看得到、摸着着的具体实体</li>
<li>对象是类的实例表现</li>
<li>万物皆对象</li>
<li>对象是特定的类型数据</li>
</ul>
</li>
<li>对象实例化<ul>
<li>实例化对象过程可以分为两部分<ul>
<li>声明对象 Class 对象名称<ul>
<li><strong>在内存的栈中开辟一个空间，此时栈空间的数据是空的</strong></li>
</ul>
</li>
<li>实例化对象 new Class<ul>
<li><strong>经过实例化的环节，会在内存的堆中开辟一块空间，在此完成具体属性赋值等相关操作</strong><br><em><strong>声明对象和实例化对象通过 &#x3D; 赋值符号完成。经过赋值操作，将内存的堆地址，传递到栈当中的内存空间里。</strong></em></li>
</ul>
</li>
</ul>
</li>
<li>内存分配 栈[局部变量] ，堆[动态数据]</li>
</ul>
</li>
<li>注意事项<ul>
<li>需要多次访问同一对象时，必须进行声明</li>
<li>同一作用范围内，不能定义同名对象</li>
<li>可以同时声明多个引用，用逗号分割<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat one,two;</span><br><span class="line">one = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">two = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();four = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ol>
<li>将类的某些信息隐藏在类的内部，不允许外部程序直接访问，通过该类提供的方法来实现对隐藏信息的操作和访问<ul>
<li>隐藏对象的信息</li>
<li>留出访问的接口</li>
</ul>
</li>
<li>特点<ul>
<li>只能通过规定的方法访问数据</li>
<li>隐藏类的实例细节，方便修改和实现</li>
</ul>
</li>
<li>实现步骤<ul>
<li>1、修改属性的可见性 ，设为 private</li>
<li>2、创建 getter&#x2F;setter 方法 ，设为 public 用户属性的读写</li>
<li>3、在 getter&#x2F;setter 方法中加入属性控制语句，对属性的合法性进行判断</li>
</ul>
</li>
<li>包（类似文件夹）<ul>
<li>作用<ul>
<li><strong>管理 Java 文件</strong></li>
<li><strong>解决同名文件冲突</strong></li>
</ul>
</li>
<li>定义包<ul>
<li>语法 package 包名;例：package com.zje.animal;</li>
<li>注意<ul>
<li><em><strong>一个 Java 源文件只能有一个 package 语句，必须放在 Java 源文件中的第一行</strong></em></li>
<li>包名全部英文小写</li>
<li>建议每个包内存储信息功能单一</li>
<li>包命名规则：域名倒序+模块+功能</li>
<li>Java 中一个包不能存在同名类</li>
</ul>
</li>
</ul>
</li>
<li>导入包<ul>
<li>语法 import 包名.类名;</li>
<li>导入包中全部类 import com.xxx.*; 导入包中指定类 import com.xxx.animal.Cat;</li>
</ul>
</li>
<li>常用系统包<ul>
<li>java.lang<ul>
<li>包含 Java 语言基础的类，该包系统加载时 默认导入。如 System、String、Math</li>
</ul>
</li>
<li>java.util<ul>
<li>包含 Java 语言中常用工具。如 Scanner、Random</li>
</ul>
</li>
<li>java.io<ul>
<li>包含输入、输出相关功能的类。如File、InputStream</li>
</ul>
</li>
</ul>
</li>
<li>问题<ul>
<li>如何实现跨包的类调用？<ul>
<li>建议采用“import 包名.类名;” 的方式加载，提高效率</li>
<li>加载类的顺序跟 import 导入语句的位置无关</li>
<li>“import 包名.*”; 无法访问指定包名下的类，无法访问子包下的类</li>
</ul>
</li>
<li>有几种调用形式？<ol>
<li>使用 import 语句导入目标类:这种方式可以直接在代码中使用 TargetClass 而无需指定完整的包路径。</li>
</ol>
<pre><code class="Java">import com.example.targetpackage.TargetClass;
</code></pre>
<ol start="2">
<li>使用完整的包路径访问目标类:这种方式需要在代码中完整地指定目标类的包路径。</li>
</ol>
<pre><code class="Java">com.example.targetpackage.TargetClass targetObject = new com.example.targetpackage.TargetClass();
</code></pre>
<ol start="3">
<li>使用 static import 导入目标类的静态成员:这种方式可以直接访问目标类的静态成员,无需指定类名。</li>
</ol>
<pre><code class="Java">import static com.example.targetpackage.TargetClass.staticMethod;
staticMethod(); // 直接调用静态方法
</code></pre>
<ol start="4">
<li>使用 default 访问修饰符允许同一个包下的类进行访问:这种方式需要将目标类的方法声明为 default 访问修饰符,这样同包下的其他类就可以访问该方法。</li>
</ol>
<pre><code class="Java">// com.example.targetpackage.TargetClass
default void defaultMethod() &#123;
  // 此方法可被同包下的其他类访问
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>static 关键字</strong><ul>
<li><strong>1、类对象共享</strong></li>
<li><strong>2、类加载时产生，销毁时释放，生命周期长</strong></li>
<li>注意事项<ul>
<li>在成员方法中，可以直接访问类中的静态成员</li>
<li>静态方法中不能直接访问非静态成员，只能直接调用静态成员</li>
<li>只能通过对象实例化后，对象.成员方法的方式访问非静态成员</li>
<li>静态方法中不能使用 this</li>
</ul>
</li>
<li>静态成员访问方式<ul>
<li>1、对象.成员</li>
<li>2、类.成员</li>
</ul>
</li>
</ul>
</li>
<li>代码块<ul>
<li>普通代码块：每此调用方法 顺序执行，先出现，先执行。</li>
<li>构造代码块：在类中定义，创建对象时调用，优先于构造方法执行。可以有多个</li>
<li>静态代码块<ul>
<li>static { &lt;语句&gt; }</li>
<li>类加载时调用，优先于构造代码块执行</li>
<li>无论产生多少类实例，静态代码块只执行一次，构造代码块在每次对象构造的时候调用</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="成员属性的初始值"><a href="#成员属性的初始值" class="headerlink" title="成员属性的初始值"></a>成员属性的初始值</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>0.0d</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>引用类型对象的初始值</td>
<td>null</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 添加 Disqus 评论系统</title>
    <url>/2024/04/14/hexo-%E6%B7%BB%E5%8A%A0-Disqus-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="登录-Disqus"><a href="#登录-Disqus" class="headerlink" title="登录 Disqus"></a>登录 Disqus</h3><p><img src="https://raw.githubusercontent.com/zhihuzeye/zhihuzeye.github.io/main/images/20240414002939.png" alt="图片" title="disqus登录"></p>
<h3 id="选择-在我的网站上安装-Disqus"><a href="#选择-在我的网站上安装-Disqus" class="headerlink" title="选择 在我的网站上安装 Disqus"></a>选择 在我的网站上安装 Disqus</h3><p><img src="/images/20240414003055.png" alt="图片" title="disqus登录"></p>
<h3 id="创建一个新站点"><a href="#创建一个新站点" class="headerlink" title="创建一个新站点"></a>创建一个新站点</h3><p>注意：Website Name 这个字段非常重要，后续需要在 _config.yml 中用到<br>点击 Create Site 按钮即可</p>
<p><img src="/images/20240414003325.png" alt="图片" title="disqus登录"></p>
<span id="more"></span>

<h3 id="配置主题-config-yml-文件"><a href="#配置主题-config-yml-文件" class="headerlink" title="配置主题 _config.yml 文件"></a>配置主题 _config.yml 文件</h3><p>网上有很多教程 直接配置，这样是不对的，配置会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname:your Website Name</span><br><span class="line">  count: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>踩坑：disqus  shortname 报错 YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key</p>
<p>shortname 需要换行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname:</span><br><span class="line">          your Website Name</span><br><span class="line">  count: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Disqus</tag>
      </tags>
  </entry>
  <entry>
    <title>【踩坑】uni.navigateTo 微信小程序 跳转无效问题</title>
    <url>/2024/04/17/%E3%80%90%E8%B8%A9%E5%9D%91%E3%80%91uni-navigateTo-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%B7%B3%E8%BD%AC%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>最近接手了一个项目，该项目在用户体验上极度不友好，如：每次请求就显示 loading ，自定义 tabbar 可点击区域太小，组件间切换白屏等等问题。本着 “要改革、就不要怕” 的原则，便大刀阔斧的对项目代码进行一系列优化。</p>
</blockquote>
<p>结果改着改着就出现了问题：</p>
<ul>
<li>分包 packageB 的路径能点击</li>
<li>packageA、packageC 里的路径不能点击</li>
<li>手机能点击、模拟器不能点击</li>
<li>模拟器能点击，手机不能点击</li>
</ul>
<p><img src="/images/emoji/tieba/035.png" alt="图片"></p>
<span id="more"></span>

<h1 id="代码不报错，是最难解决的-bug-！！！"><a href="#代码不报错，是最难解决的-bug-！！！" class="headerlink" title="代码不报错，是最难解决的 bug ！！！"></a>代码不报错，是最难解决的 bug ！！！</h1><p>这让我一度怀疑是 小程序开发者工具问题、小程序基础库版本问题，nodejs 版本问题 、vue-cli 版本问题，<br>然后就 nvm 切换版本、开发者工具卸载删除、基础库版本修改一系列骚操作。。。</p>
<p><strong>马后炮：</strong> 如果代码能跑起来，肯定是没有问题的，微信小程序开发者工具 navigateTo 、redirectTo 、switchTab 、reLaunch 这些基础的 API 无论是哪个基础库都能很好的支持。</p>
<p>大概率不用去想 nodejs 版本问题， 删除掉 node_modules 再重装挺浪费时间的。 所以很多时候都是代码中的问题。</p>
<p>比如我这个 bug 有些链接能跳转 有些不能跳转，就复制能跳转的 链接，<strong>全局检索</strong>。<strong>查找它们其中的差异</strong></p>
<p>问题出现的地方：<br>程序初始化 拦截了 navigateTo、redirectTo、switchTab、reLaunch 这些操作，执行 checkVisitPage 方法，如果链接在白名单列表中且已登录就能跳转，否则唤起登录的弹窗。</p>
<p>”好巧不巧，我把登录弹窗组件删除掉了，因为它在每个页面都写了一遍“，所以点击没有反应。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line">	addInterceptor,</span><br><span class="line">	checkVisitPage</span><br><span class="line">&#125; from &quot;./utils/index.js&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">	globalData: &#123;</span><br><span class="line">		systemInfo: null</span><br><span class="line">	&#125;,</span><br><span class="line">	onLaunch: function () &#123;</span><br><span class="line">		this.initApp();</span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;</span><br><span class="line">		initApp() &#123;</span><br><span class="line">			addInterceptor.call(this);</span><br><span class="line">			checkVisitPage.call(this);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// utils/index.js</span><br><span class="line">const openPages = [</span><br><span class="line">	&#x27;/pages/home/index&#x27;,</span><br><span class="line">	&#x27;/pages/webView/index&#x27;,</span><br><span class="line">	...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export function checkVisitPage(url) &#123;</span><br><span class="line">	if (!url) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	if (url.indexOf(&quot;?&quot;) &gt; -1) &#123;</span><br><span class="line">		url = url.split(&quot;?&quot;)[0];</span><br><span class="line">	&#125;</span><br><span class="line">	if (!openPages.includes(url)) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			const userInfo = uni.getStorageSync(&#x27;userInfo&#x27;);</span><br><span class="line">			if (!userInfo.accessToken || userInfo?.userType == 7) &#123;</span><br><span class="line">				this.$store.commit(&#x27;common/setPurviewWarningMethod&#x27;, true)</span><br><span class="line">				return false;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				this.$store.commit(&#x27;common/setPurviewWarningMethod&#x27;, false)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (e) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function addInterceptor() &#123;</span><br><span class="line">	uni.addInterceptor(&#x27;navigateTo&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">	uni.addInterceptor(&#x27;redirectTo&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">	uni.addInterceptor(&#x27;switchTab&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">	uni.addInterceptor(&#x27;reLaunch&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>其它：如果无法跳转，请检查 是否 &#x2F; 斜杆开头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uni.navigateTo(&#123;</span><br><span class="line">	url: &#x27;/pages/index/index&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<blockquote>
<p>因为这两天给环境整崩溃了，某些老项目没有 yarn.lock 或 package-lock 文件 ，代码 dev 能启动起来，但是 build 失败！，怀疑是 nodejs 版本问题，typescript 版本不兼容问题等等，最后向原来的开发人员，重新套了个壳， 才知道 package.json 少了 esbuild-loader 依赖！ 为啥源码里 package.json  没有 esbuild-loader …</p>
</blockquote>
<p>但是错误提示可不友好，让你根本搜索不到错误发生的原因</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[tsl] ERROR in \node_modules\@types\node\util.d.ts(1656,1)</span><br><span class="line">      TS1128: Declaration or statement expected.</span><br><span class="line">ERROR in \node_modules\@types\node\util.d.ts</span><br><span class="line"></span><br><span class="line">[tsl] ERROR in \node_modules\@types\node\util.d.ts(1654,26)</span><br><span class="line">      TS1005: &#x27;;&#x27; expected.</span><br></pre></td></tr></table></figure>




<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><ol>
<li>能自己解决的尽量不麻烦别人，遇到问题首先 谷歌，GPT 查询（此操作最好不要超过 1小时）</li>
<li>仔细阅读源码，全局检索 查找它们其中的差异</li>
<li>善于交流、勇于交流。（在不得已要麻烦别人的时候，也不要害怕。 出门靠朋友~ 态度好点虚心求教，很多人愿意帮你的）</li>
<li>站起来喝杯咖啡吧！有时候把事情缓一缓。解决问题的思绪就来了</li>
</ol>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>一家互联网公司是如何运作的？</title>
    <url>/2024/04/18/%E4%B8%80%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>当今，互联网公司在全球范围内发挥着日益重要的作用。它们不仅改变了我们的生活方式，还在商业领域产生了深远的影响。本文将探讨一家典型互联网公司的运作方式，深入了解其内部机制和关键流程。通过对互联网公司的运作进行剖析，我们可以更好地理解这些公司如何取得成功，并对未来发展趋势有所启示。</p>
</blockquote>
<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><table>
<thead>
<tr>
<th>项目角色</th>
<th>岗位职责（概述）</th>
</tr>
</thead>
<tbody><tr>
<td>BDM 市场拓展经理</td>
<td>负责目标客户的拓展和挖掘、搞好客户关系</td>
</tr>
<tr>
<td>BM 商务经理</td>
<td>负责项目的投标、实施及方案解决的沟通</td>
</tr>
<tr>
<td>PM 产品经理</td>
<td>收集、分析用户需求、提需求、画原型</td>
</tr>
<tr>
<td>UE 视觉设计师</td>
<td>根据产品经理原型画设计稿</td>
</tr>
<tr>
<td>FE 前端开发</td>
<td>根据设计稿编写前端代码</td>
</tr>
<tr>
<td>RD 后端开发</td>
<td>设计数据库、对接三方 API、开发接口</td>
</tr>
<tr>
<td>CRD 移动端开发</td>
<td>ios、Android 移动端开发</td>
</tr>
<tr>
<td>QA 测试人员</td>
<td>根据产品需求，软件中的缺陷提 bug</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="一、商务拓展阶段"><a href="#一、商务拓展阶段" class="headerlink" title="一、商务拓展阶段"></a>一、商务拓展阶段</h2><h3 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h3><ul>
<li>目标客户的拓展和挖掘</li>
<li>各地市场的考察和调研工作</li>
<li>搞好客户关系</li>
</ul>
<h3 id="招投标"><a href="#招投标" class="headerlink" title="招投标"></a>招投标</h3><ul>
<li>及时关注网路招标信息</li>
<li>投标标书撰写、系统演示讲解、讲述投标方案</li>
</ul>
<h3 id="商务谈判"><a href="#商务谈判" class="headerlink" title="商务谈判"></a>商务谈判</h3><ul>
<li>与客户进行交流细化、收集、分析用户需求</li>
<li>制定可行性合作策略和执行方案</li>
<li>沟通合作意向，并积极促成合作</li>
<li>合作伙伴关系的建立，合同签订</li>
</ul>
<h2 id="二、产品开发阶段"><a href="#二、产品开发阶段" class="headerlink" title="二、产品开发阶段"></a>二、产品开发阶段</h2><h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><ul>
<li>了解项目的需求和目标</li>
<li>积极参与需求讨论、敢于质疑需求是否合理（如：需求是否闭环？、开发难度如何？是否需要其它支持？等等）</li>
<li>不要急于给排期</li>
</ul>
<h3 id="技术方案设计"><a href="#技术方案设计" class="headerlink" title="技术方案设计"></a>技术方案设计</h3><ul>
<li>系统架构设计、模块划分、数据流设计等</li>
<li>确定系统的整体结构和关键模块</li>
<li>找准设计重点、技术上求简单，不过度设计</li>
<li>注意要产出文档（如：数据库设计、接口设计等），交付时用！</li>
<li>多和其他开发人员沟通</li>
</ul>
<h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><ul>
<li>符合开发规范（git 分支规范、注释的规范、RESTful API 设计规范、模块命名的规范等）</li>
<li>写出开发文档（如组件的使用、单点登录鉴权使用）代码注释</li>
<li>及时写单元测试</li>
<li>Mock API、PostMan 模拟前端请求</li>
<li>Code Review</li>
</ul>
<h3 id="接口评审"><a href="#接口评审" class="headerlink" title="接口评审"></a>接口评审</h3><ul>
<li>RD 后端同学接口开发完成，生成接口文档（Swagger、Yapi ）</li>
<li>FE 前端同学 、CRD 移动端同学 参与接口评审，通过之前 Mock 的数据，给后端同学反馈接口字段是否不足等</li>
</ul>
<h3 id="接口联调"><a href="#接口联调" class="headerlink" title="接口联调"></a>接口联调</h3><ul>
<li>RD 后端同学 和 FE 前端同学、 CRD 移动端通信 接口联调</li>
<li>UE 和 PM 尽早介入 （UE 确定视觉效果、UI 样式走查、PM 确定产品功能）</li>
</ul>
<h3 id="代码自测"><a href="#代码自测" class="headerlink" title="代码自测"></a>代码自测</h3><ul>
<li>查看需求和原型、根据需求描述，自己操作一遍是否符合预期</li>
<li>代码的单元测试</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>提测发邮件，抄送项目组（如我们在项目组发消息）</li>
<li>测试问题要详细记录（比如：禅道、Teambition 等工具）</li>
<li>有问题及时沟通，QA 测试人员 和 开发人员信息不对称（QA 测试会根据需求跟 PM 确认写测试文档，会偷偷改需求~ ）</li>
</ul>
<h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><ul>
<li>测试环境没有问题后，就可以发线上环境了（此处可以设置预发环境，预发环境数据库和线上的一样，有时测试数据库和线上数据库不一致，会导致一些不可预知的错误）</li>
<li>上线之后及时通知 QA 回归测试</li>
<li>上线之后及时同步给 PM 和项目组</li>
<li>如有问题，及时回滚，先止损，再排查问题</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>如何反馈排期？<ul>
<li>给自己预留一点空间，考虑自己的并行工作，从前端开发的角度，可以让设计师、后端给排期，再排期，如果设计师、后端没有给出排期，自己先根据需求给工作量（多少工时能做完）</li>
<li>项目排期 &#x3D; UE 设计时间  + 前后端开发时间 + 接口联调时间 +  自测时间 + 提测上线时间</li>
<li>项目排期前和相关开发人员做好充分沟通</li>
</ul>
</li>
<li>PM 加需求怎么办？<ul>
<li>看情况、如果是改个文案加个字段的简单需求，一般顺手改掉就好了，如果是主流程改动，影响进度了，公司有规定情况，走需求变更流程即可（如：PM 提交需求变更单），没有规定的话发起项目组和 leader 的评审，重新评估排期</li>
</ul>
</li>
<li>已经排完期，项目完不成怎么办？<ul>
<li>加班！排期是自己给的，吃一堑长一智。</li>
</ul>
</li>
<li>QA 提的 bug 无法复现怎么办？<ul>
<li>当面讨论，让他帮忙复现。</li>
</ul>
</li>
<li>怎样才是好的开发节奏？<ul>
<li>前紧后松，项目排完期了后，尽快的完成手头上的开发安排，留多一点时间给自己自测，Code Review，提高自己的代码质量</li>
</ul>
</li>
</ol>
<h2 id="三、交付"><a href="#三、交付" class="headerlink" title="三、交付"></a>三、交付</h2><p>交付一般需提供以下文档：</p>
<ul>
<li>需求规格说明书：包括客户需求、功能规格、非功能性需求等详细描述，是开发团队了解客户需求和开发目标的重要参考。</li>
<li>设计文档：包括软件架构设计、模块设计、数据库设计等，帮助开发人员理解系统设计和实现细节。</li>
<li>用户手册：为最终用户提供软件的使用说明，包括安装步骤、操作指南、常见问题解答等，以便用户能够正确地使用软件。</li>
<li>API 文档：如果软件包含接口，需要提供清晰的 API 文档，包括接口定义、参数说明、返回结果等，方便其他开发者集成和使用。</li>
<li>测试文档：包括测试计划、测试用例、测试报告等，记录了软件的测试过程和结果，验证软件是否符合需求和质量标准。</li>
<li>部署文档：描述软件的部署流程，包括环境要求、安装步骤、配置说明等，确保软件能够顺利部署和运行。</li>
<li>维护文档：包括系统架构、关键模块、重要功能点等说明，方便后续维护人员理解系统结构和代码逻辑。</li>
</ul>
<h2 id="四、市场营销和销售阶段"><a href="#四、市场营销和销售阶段" class="headerlink" title="四、市场营销和销售阶段"></a>四、市场营销和销售阶段</h2><ul>
<li>各种搜索引擎信息流、短视频投放广告、意向客户留言</li>
<li>拨打意向客户电话、促成成交</li>
<li>潜在客户挖掘和拓展（如：有一款电销系统，我要推销给客户，如何挖掘潜在客户？BOSS 直聘查看有哪些公司在招销售人员，天眼查找到公司的法人联系方式，向他推荐该系统。）</li>
</ul>
<hr>
<p><img src="/images/20240419235446.png" alt="图片" title="软件开发流程图"><br><img src="/images/47550_template.png" alt="图片" title="软件项目开发甘特图"></p>
<hr>
<blockquote>
<p>本文是基于 to G（to Government） 的软件开发模式进行探讨，对于互联网的产品自研的公司，一般没有 商务拓展阶段 , 需求从“群众中来 到群众中去”。</p>
<p>本文是个人工作中经验的总结，难免会有问题和理解偏差，如果有问题请进行评论，我也会尽力去改进，自己也在学习的路上，欢迎交流，非常感谢！</p>
</blockquote>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>微搭 h5 跳转小程序</title>
    <url>/2024/04/28/%E5%BE%AE%E6%90%AD-h5-%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>场景：小程序内嵌 微搭 H5 页面， 点击 H5 某块区域，跳转到小程序详情页</p>
</blockquote>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function (&#123; event, data &#125;) &#123;</span><br><span class="line">  const value = data?.target</span><br><span class="line">  try &#123;</span><br><span class="line">    wx.miniProgram.navigateTo(&#123;</span><br><span class="line">      url: `/packageC/houseDetails/index?id=$&#123;value&#125;`,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: `/packageC/houseDetails/index?id=$&#123;value&#125;`,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错：事件响应失败:组件container8[tap事件 响应Id wwvcp1rff5h]:wx is not defined</p>
<p><img src="/images/20240428154808.png" alt="图片"></p>
<p>自建的 H5 判断 navigator.userAgent 是微信环境后可以 直接使用  wx.miniProgram.navigateTo Api , 微搭并不支持。</p>
<p>解决方法：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html">https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html</a></p>
<ol>
<li>微搭应用编辑-&gt;应用设置-&gt;开发设置-&gt;加载外部资源(JS&#x2F;CSS)</li>
<li>将 <a href="https://res.wx.qq.com/open/js/jweixin-1.3.2.js">https://res.wx.qq.com/open/js/jweixin-1.3.2.js</a> 资源下载本地，放到公司 OSS 上</li>
</ol>
<p><img src="/images/20240428160058.png" alt="图片"></p>
]]></content>
      <categories>
        <category>微搭</category>
      </categories>
      <tags>
        <tag>微搭低代码</tag>
      </tags>
  </entry>
  <entry>
    <title>找不到插件依赖 @tarojs/plugin-platform-h5，请先在项目中安装</title>
    <url>/2024/06/02/%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8F%92%E4%BB%B6%E4%BE%9D%E8%B5%96-tarojs-plugin-platform-h5%EF%BC%8C%E8%AF%B7%E5%85%88%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>运行一个 Taro 的项目，安装完相关依赖后执行命令报错</p>
</blockquote>
<h1 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h1><ul>
<li>yarn install </li>
<li>yarn run start</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在执行任务: yarn run start </span><br><span class="line"></span><br><span class="line">yarn run v1.22.19</span><br><span class="line">$ npm run dev:h5</span><br><span class="line"></span><br><span class="line">&gt; renthouse-taro@1.0.0 dev:h5</span><br><span class="line">&gt; npm run build:h5 -- --watch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; renthouse-taro@1.0.0 build:h5</span><br><span class="line">&gt; taro build --type h5 --watch </span><br><span class="line"></span><br><span class="line">👽 Taro v3.6.25</span><br><span class="line"></span><br><span class="line">找不到插件依赖 &quot;@tarojs/plugin-platform-h5&quot;，请先在项目中安装，项目路径：D:\xxx\xxx\renthouse-taro</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>因为我之前安装过 Taro 最新版本的 cli , 和现有的 Taro 版本不兼容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro --version</span><br><span class="line">👽 Taro v3.6.25</span><br><span class="line"></span><br><span class="line">3.6.25</span><br></pre></td></tr></table></figure>


<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>npm uninstall -g @tarojs&#x2F;cli  # 卸载 Trao</li>
<li>npm install -g @tarojs&#x2F;<a href="mailto:&#99;&#108;&#x69;&#64;&#x33;&#46;&#48;&#x2e;&#x32;&#57;">&#99;&#108;&#x69;&#64;&#x33;&#46;&#48;&#x2e;&#x32;&#57;</a>  # 安装指定版本 Trao</li>
<li>也有可能 nodejs 版本过低和 taro&#x2F;cli 不兼容，nvm 切换 16.x 以上版本试试</li>
</ol>
]]></content>
      <tags>
        <tag>Taro</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次精度丢失问题</title>
    <url>/2024/05/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>在使用 Antd Select 组件的时候，请求详情回显 显示了一个错误的 value 值，不显示 label。</p>
</blockquote>
<p><img src="/images/20240514153755.png" alt="图片"></p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ul>
<li>后端给前端传了一个 1293435817355730946（19位） 大数值类型，前端通过 ‘’ + 、toString() 等方式进行类型转换，得到 1293435817355731000（精度丢失），Select 列表没有对应上 [类型和数值]，所以绑定不上。</li>
</ul>
<p>因为 JavaScript 中的数字类型 (Number) 有一定的精度限制。在JavaScript中,数字类型使用 IEEE 754 标准,采用 64位 浮点数表示。这种表示方式存在一些局限性:</p>
<ol>
<li>整数的精确表示范围为-2^53 + 1 到 2^53 - 1,即 -9007199254740991 到 9007199254740991（16位） 。超出这个范围的整数将丢失精度。</li>
<li>浮点数的表示也有误差,无法精确表示某些十进制小数，比如0.1。</li>
</ol>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><ol>
<li>与后端开发沟通，通过字符串传递</li>
<li>使用 ES2020 BigInt 类型 </li>
<li>使用 bignumber.js、decimal.js 等第三方库解决</li>
</ol>
]]></content>
  </entry>
</search>
